{"remainingRequest":"/home/svw/vue_go_app/frontend/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/svw/vue_go_app/frontend/app/src/components/Tool.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/svw/vue_go_app/frontend/app/src/components/Tool.vue","mtime":1594239947418},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBwYXBlciBmcm9tICdwYXBlcicKaW1wb3J0ICogYXMgRmlsZVNhdmVyIGZyb20gJ2ZpbGUtc2F2ZXInCmltcG9ydCAqIGFzIGN2IGZyb20gJ29wZW5jdi5qcycKaW1wb3J0ICogYXMgWmlwIGZyb20gJ2pzemlwJwppbXBvcnQgKiBhcyBaaXBVdGlsIGZyb20gJ2pzemlwLXV0aWxzJwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdUb29sJywKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgIGltZzogbmV3IEltYWdlKCksCiAgICAgIHdpZHRoOiA1MTIsCiAgICAgIGhlaWdodDogNTEyLAogICAgICBtYXQ6ICcnLAogICAgICBpbWFnZVZpZXc6ICcnLAogICAgICBpbWFnZTogJycsCiAgICAgIHRlbXBNYXNrMjogJycsCiAgICAgIGZpbmFsTWFza1Jlc3VsdDogJycsCiAgICAgIGdyZWVuTWFzazogJycsCiAgICAgIHJlZE1hc2s6ICcnLAogICAgICBhZGRXZWlnaHRlZE1hdDogJycsCiAgICAgIGltZ19kaXI6IFtdLAogICAgICBpbWdfZGlyX3BvczogMCwKICAgICAgcmVjdDogJycsCiAgICAgIHAxOiAnJywKICAgICAgcDM6ICcnLAogICAgICBjb2xvcjogJycsCiAgICAgIGRyYXdUeXBlOiAnJywKICAgICAgYWxwaGE6IC0wLjUsCiAgICAgIGJldGE6IDEsCiAgICAgIGdhbW1hOiAxLAogICAgICBjb3VudDogMCwKICAgICAgZHJhd2luZzogZmFsc2UsCiAgICAgIGRyYXdMaW5lOiBmYWxzZSwKICAgICAgc2VsZWN0ZWQ6IGZhbHNlLAogICAgICBjb250aW51ZTogZmFsc2UsCiAgICAgIHRvb2xBY3RpdmU6IGZhbHNlLAogICAgICByZWN0RHJhd246IGZhbHNlLAogICAgICBmb3JlZ3JvdW5kUG9pbnRzOiBbXSwKICAgICAgYmFja2dyb3VuZFBvaW50czogW10sCiAgICAgIHVuZG9Qb2ludHNGZzogW10sCiAgICAgIHVuZG9Qb2ludHNCZzogW10sCiAgICAgIHVuZG9Qb2ludHM6IFtdLAogICAgICB1bmRvTWF0czogW10sCiAgICAgIGZpbGVOYW1lczogW10sCiAgICAgIHNhdmVPcmRlcjogW10sCiAgICAgIG1hc2tzOiBbXSwKICAgICAgYWN0aXZlSW5kZXg6ICcnLAogICAgICBjdXJzb3JUeXBlOiAnY3Jvc3NoYWlyJywKICAgICAgYWN0aW9uVmFyaWFudDogJ291dGxpbmUtc2Vjb25kYXJ5JywKICAgICAgZG93bmxvYWRDb2xvcjogJ3dhcm5pbmcnLAogICAgICBudW1TYXZlZDogMAogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgcHJldmVudERlZmF1bHQgKGUpIHsKICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpCiAgICB9LAogICAgdG9nZ2xlIChpbmRleCkgewogICAgICB0aGlzLmFjdGl2ZUluZGV4ID0gaW5kZXgKICAgICAgdGhpcy5pbWdfZGlyX3BvcyA9IGluZGV4CiAgICAgIHRoaXMuaW1nLnNyYyA9IHRoaXMuaW1nX2RpcltpbmRleF0KICAgICAgdGhpcy5yZXNldEltZygpCiAgICB9LAoKICAgIC8vIEZpbGUgVXBsb2FkIGFuZCBTYXZpbmcvZG93bmxvYWRpbmcKICAgIG9uRmlsZVNlbGVjdGVkIChlKSB7CiAgICAgIHRoaXMudG9vbEFjdGl2ZSA9IHRydWUKICAgICAgdmFyIGZpbGVzID0gZS50YXJnZXQuZmlsZXMKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBmTmFtZSA9IGUudGFyZ2V0LmZpbGVzW2ldLm5hbWUKICAgICAgICBpZiAoZk5hbWUuaW5kZXhPZignLnBuZycpID09PSAtMSkgewogICAgICAgICAgdGhpcy5maWxlTmFtZXMucHVzaChmTmFtZS5zbGljZSgwLCBmTmFtZS5sYXN0SW5kZXhPZignLicpKSArICcucG5nJykKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICB0aGlzLmZpbGVOYW1lcy5wdXNoKGZOYW1lKQogICAgICAgIH0KICAgICAgICB0aGlzLmltZ19kaXIucHVzaChVUkwuY3JlYXRlT2JqZWN0VVJMKGUudGFyZ2V0LmZpbGVzW2ldKSkKICAgICAgfQogICAgICBjb25zb2xlLmxvZyh0aGlzLmZpbGVOYW1lcykKICAgICAgdGhpcy5pbWcuc3JjID0gdGhpcy5pbWdfZGlyW3RoaXMuaW1nX2Rpcl9wb3NdCiAgICAgIHBhcGVyLnNldHVwKHRoaXMuJHJlZnNbJ2NhbnZhc091dHB1dCddKQogICAgICB0aGlzLmltZy5vbmxvYWQgPSAoKSA9PiB7CiAgICAgICAgdGhpcy5zaG93SW1nKCkKICAgICAgfQogICAgfSwKICAgIC8vIHNhdmVNYXNrICgpIHsKICAgIC8vICAgLy8gLy8gdmFyIEppbXAgPSByZXF1aXJlKCdqaW1wJykKICAgIC8vICAgLy8gdGhpcy5udW1TYXZlZCsrCiAgICAvLyAgIC8vIHZhciB6aXAgPSBuZXcgWmlwKCkKICAgIC8vICAgLy8gLy8gdmFyIGppbXAgPSBuZXcgSmltcCgpCiAgICAvLyAgIC8vIHZhciBuZXdJbWcgPSBuZXcgSW1hZ2UoKQogICAgLy8gICAvLyB2YXIgdXJsCiAgICAvLyAgIC8vIHZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzTWFzaycpCiAgICAvLyAgIC8vIHZhciBmaWxlTmFtZXMgPSB0aGlzLmZpbGVOYW1lcwogICAgLy8gICAvLyB2YXIgaW1nRGlyUG9zID0gdGhpcy5pbWdfZGlyX3BvcwogICAgLy8gICAvLyBjYW52YXMudG9CbG9iKGZ1bmN0aW9uIChibG9iKSB7CiAgICAvLyAgIC8vICAgbmV3SW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJykKICAgIC8vICAgLy8gICB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpCiAgICAvLyAgIC8vICAgY29uc29sZS5sb2codXJsKQogICAgLy8gICAvLyAgIG5ld0ltZy5zcmMgPSB1cmwKICAgIC8vICAgLy8gICAvLyBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5ld0ltZykKICAgIC8vICAgLy8gICBaaXBVdGlsLmdldEJpbmFyeUNvbnRlbnQobmV3SW1nLnNyYywgZnVuY3Rpb24gKGVyciwgZGF0YSkgewogICAgLy8gICAvLyAgICAgaWYgKGVycikgewogICAgLy8gICAvLyAgICAgICB0aHJvdyBlcnIKICAgIC8vICAgLy8gICAgIH0KICAgIC8vICAgLy8gICAgIHppcC5maWxlKGZpbGVOYW1lc1tpbWdEaXJQb3NdLCBkYXRhLCB7YmluYXJ5OiB0cnVlfSkKICAgIC8vICAgLy8gICAgIHppcC5nZW5lcmF0ZUFzeW5jKHt0eXBlOiAnYmxvYid9KS50aGVuKGZ1bmN0aW9uIChjb250ZW50KSB7CiAgICAvLyAgIC8vICAgICAgIEZpbGVTYXZlci5zYXZlQXMoY29udGVudCwgJ01hc2tzJykKICAgIC8vICAgLy8gICAgIH0pCiAgICAvLyAgIC8vICAgfSkKICAgIC8vICAgLy8gfSkKICAgIC8vICAgLy8gLy8gSmltcC5yZWFkKCdjYW52YXNNYXNrJykKICAgIC8vICAgLy8gLy8gY29uc29sZS5sb2coSmltcCkKICAgIC8vICAgLy8gLy8gSmltcC53cml0ZSgnY2FudmFzTWFzaycpCiAgICAvLyAgIC8vIC8vIHRoaXMubmV4dCgpCiAgICAvLyAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzTWFzaycpCiAgICAvLyAgIHZhciBuZXdJbWcgPSBuZXcgSW1hZ2UoKQogICAgLy8gICB2YXIgdXJsCiAgICAvLyAgIHZhciBwbmcKICAgIC8vICAgdmFyIGZpbGVOYW1lcyA9IHRoaXMuZmlsZU5hbWVzCiAgICAvLyAgIHZhciBpbWdEaXJQb3MgPSB0aGlzLmltZ19kaXJfcG9zCiAgICAvLyAgIHZhciBkb3dubG9hZCA9IGZ1bmN0aW9uIChocmVmLCBuYW1lKSB7CiAgICAvLyAgICAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJykKICAgIC8vICAgICBsaW5rLmRvd25sb2FkID0gbmFtZQogICAgLy8gICAgIGxpbmsuc3R5bGUub3BhY2l0eSA9ICcwJwogICAgLy8gICAgIGxpbmsuaHJlZiA9IGhyZWYKICAgIC8vICAgICBsaW5rLmNsaWNrKCkKICAgIC8vICAgICBsaW5rLnJlbW92ZSgpCiAgICAvLyAgIH0KICAgIC8vICAgY2FudmFzLnRvQmxvYihmdW5jdGlvbiAoYmxvYikgewogICAgLy8gICAgIG5ld0ltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpCiAgICAvLyAgICAgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKQogICAgLy8gICAgIG5ld0ltZy5zcmMgPSB1cmwKICAgIC8vICAgICBwbmcgPSBjYW52YXMudG9EYXRhVVJMKCkKICAgIC8vICAgICBkb3dubG9hZChwbmcsIGZpbGVOYW1lc1tpbWdEaXJQb3NdKQogICAgLy8gICB9KQogICAgLy8gICB0aGlzLm5leHQoKQogICAgLy8gfSwKICAgIHNhdmVNYXNrICgpIHsKICAgICAgdGhpcy5hZGRNYXNrKHRoaXMuZmluYWxNYXNrUmVzdWx0KQogICAgICB0aGlzLm51bVNhdmVkKysKICAgICAgaWYgKHRoaXMubnVtU2F2ZWQgPT09IHRoaXMuaW1nX2Rpci5sZW5ndGgpIHsKICAgICAgICB0aGlzLmRvd25sb2FkQ29sb3IgPSAnc3VjY2VzcycKICAgICAgfQogICAgICB0aGlzLmFjdGlvblZhcmlhbnQgPSAnb3V0bGluZS1zdWNjZXNzJwogICAgICB0aGlzLnNhdmVPcmRlci5wdXNoKHRoaXMuZmlsZU5hbWVzW3RoaXMuaW1nX2Rpcl9wb3NdKQogICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbnZhc01hc2snKQogICAgICB2YXIgbWFza3MgPSB0aGlzLm1hc2tzCiAgICAgIGNhbnZhcy50b0Jsb2IoZnVuY3Rpb24gKGJsb2IpIHsKICAgICAgICB2YXIgbmV3SW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJykKICAgICAgICB2YXIgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKQogICAgICAgIGNvbnNvbGUubG9nKHVybCkKICAgICAgICBuZXdJbWcuc3JjID0gdXJsCiAgICAgICAgLy8gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChuZXdJbWcpCiAgICAgICAgbWFza3MucHVzaCh1cmwpCiAgICAgICAgLy9Db21tdW5pY2F0aW9uIHdpdGggR29MYW5nCiAgICAgICAgLy8gYXhpb3Moe21ldGhvZDogIlBPU1QiLCB1cmw6ICJodHRwOi8vMTAuMTAuMTEuNTk6ODA4MS8iLCBkYXRhOiBkYXRhLCBoZWFkZXJzOiB7ImNvbnRlbnQtdHlwZSI6ICJ0ZXh0L3BsYWluIn19KS50aGVuKHJlc3VsdCA9PiB7CiAgICAgICAgICAKICAgICAgICAvLyB9KQogICAgICB9KQogICAgICB0aGlzLm1hc2tzID0gbWFza3MKICAgICAgY29uc29sZS5sb2codGhpcy5zYXZlT3JkZXIpCiAgICAgIHRoaXMubmV4dCgpCiAgICB9LAogICAgZ2VuZXJhdGVaaXAgKCkgewogICAgICBpZiAodGhpcy5tYXNrcy5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5jYW5aaXAgPSB0cnVlCiAgICAgICAgdmFyIHppcCA9IG5ldyBaaXAoKQogICAgICAgIHZhciBjb3VudDEgPSAwCiAgICAgICAgdmFyIHNhdmVPcmRlciA9IHRoaXMuc2F2ZU9yZGVyCiAgICAgICAgdmFyIG1hc2tzID0gdGhpcy5tYXNrcwogICAgICAgIHRoaXMubWFza3MuZm9yRWFjaChmdW5jdGlvbiAodXJsLCBpKSB7CiAgICAgICAgICBaaXBVdGlsLmdldEJpbmFyeUNvbnRlbnQodXJsLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICB0aHJvdyBlcnIKICAgICAgICAgICAgfQogICAgICAgICAgICB6aXAuZmlsZShzYXZlT3JkZXJbaV0sIGRhdGEsIHtiaW5hcnk6IHRydWV9KQogICAgICAgICAgICBjb3VudDErKwogICAgICAgICAgICBpZiAoY291bnQxID09PSBtYXNrcy5sZW5ndGgpIHsKICAgICAgICAgICAgICB6aXAuZ2VuZXJhdGVBc3luYyh7dHlwZTogJ2Jsb2InfSkudGhlbihmdW5jdGlvbiAoYmxvYikgewogICAgICAgICAgICAgICAgRmlsZVNhdmVyLnNhdmVBcyhibG9iLCAnTWFza3MuemlwJykKICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIH0pCiAgICAgIH0KICAgIH0sCgogICAgLy8gQ2FudmFzL0ltYWdlIG5hdmlnYXRpb24gYW5kIG91dHB1dAogICAgc2hvd0ltZyAoKSB7CiAgICAgIHRoaXMubWF0ID0gY3YuaW1yZWFkKHRoaXMuaW1nKQogICAgICBjdi5yZXNpemUodGhpcy5tYXQsIHRoaXMuaW1hZ2VWaWV3LCBuZXcgY3YuU2l6ZSg1MTIsIDUxMiksIDAsIDAsIGN2LklOVEVSX05FQVJFU1QpCiAgICAgIGN2Lmltc2hvdygnY2FudmFzT3V0cHV0JywgdGhpcy5pbWFnZVZpZXcpCiAgICB9LAogICAgcHJldiAoKSB7CiAgICAgIGlmICh0aGlzLmltZ19kaXJfcG9zID4gMCkgewogICAgICAgIHRoaXMuaW1nX2Rpcl9wb3MgLT0gMQogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIHRoaXMuaW1nX2Rpcl9wb3MgPSB0aGlzLmltZ19kaXIubGVuZ3RoIC0gMQogICAgICB9CiAgICAgIHRoaXMuaW1nLnNyYyA9IHRoaXMuaW1nX2Rpclt0aGlzLmltZ19kaXJfcG9zXQogICAgICB0aGlzLnJlc2V0SW1nKCkKICAgIH0sCiAgICBuZXh0ICgpIHsKICAgICAgaWYgKHRoaXMuaW1nX2Rpcl9wb3MgPT09IHRoaXMuaW1nX2Rpci5sZW5ndGggLSAxKSB7CiAgICAgICAgdGhpcy5pbWdfZGlyX3BvcyA9IDAKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICB0aGlzLmltZ19kaXJfcG9zICs9IDEKICAgICAgfQogICAgICB0aGlzLnJlc2V0SW1nKCkKICAgIH0sCiAgICByZXNldEltZyAoKSB7CiAgICAgIHZhciBibGFuayA9IG5ldyBjdi5NYXQoNTEyLCA1MTIsIGN2LkNWXzhVQzEsIG5ldyBjdi5TY2FsYXIoNTIsIDY0LCA1OCwgMjU1KSkKICAgICAgdGhpcy5jdXJzb3JUeXBlID0gJ2Nyb3NzaGFpcicKICAgICAgdGhpcy5hY3Rpb25WYXJpYW50ID0gJ291dGxpbmUtc2Vjb25kYXJ5JwogICAgICB0aGlzLnNlbGVjdGVkID0gZmFsc2UKICAgICAgdGhpcy5kcmF3TGluZSA9IGZhbHNlCiAgICAgIHRoaXMuZHJhd2luZyA9IGZhbHNlCiAgICAgIHRoaXMuY29udGludWUgPSBmYWxzZQogICAgICB0aGlzLnJlY3REcmF3biA9IGZhbHNlCiAgICAgIHRoaXMuYmFja2dyb3VuZFBvaW50cyA9IFtdCiAgICAgIHRoaXMuZm9yZWdyb3VuZFBvaW50cyA9IFtdCiAgICAgIHRoaXMudW5kb1BvaW50c0ZnID0gW10KICAgICAgdGhpcy51bmRvUG9pbnRzQmcgPSBbXQogICAgICB0aGlzLnVuZG9Qb2ludHMgPSBbXQogICAgICB0aGlzLnVuZG9NYXRzID0gW10KICAgICAgZGVsZXRlIHRoaXMucmVjdAogICAgICB0aGlzLmNvdW50ID0gMAogICAgICB0aGlzLmZpbmFsTWFza1Jlc3VsdC5kZWxldGUoKQogICAgICB0aGlzLmZpbmFsTWFza1Jlc3VsdCA9IG5ldyBjdi5NYXQoNTEyLCA1MTIsIGN2LkNWXzhVQzEsIG5ldyBjdi5TY2FsYXIoMCwgMCwgMCwgMjU1KSkKICAgICAgdGhpcy5hZGRXZWlnaHRlZE1hdC5kZWxldGUoKQogICAgICB0aGlzLmFkZFdlaWdodGVkTWF0ID0gbmV3IGN2Lk1hdCgpCiAgICAgIHRoaXMuZ3JhYkN1dE1hc2suZGVsZXRlKCkKICAgICAgdGhpcy5ncmFiQ3V0TWFzayA9IG5ldyBjdi5NYXQoNTEyLCA1MTIsIGN2LkNWXzhVQzEsIG5ldyBjdi5TY2FsYXIoMCwgMCwgMCwgMjU1KSkKICAgICAgdGhpcy5pbWcuc3JjID0gdGhpcy5pbWdfZGlyW3RoaXMuaW1nX2Rpcl9wb3NdCiAgICAgIHRoaXMuaW1nLm9ubG9hZCA9ICgpID0+IHsKICAgICAgICB0aGlzLnNob3dJbWcoKQogICAgICAgIGN2Lmltc2hvdygnY2FudmFzSW5wdXQnLCBibGFuaykKICAgICAgfQogICAgfSwKCiAgICAvLyBNb3VzZSBFdmVudHMKICAgIG1vdXNlRG93biAoZSkgewogICAgICB0aGlzLnAzID0gZS5wb2ludAogICAgICBpZiAoIXRoaXMuZHJhd0xpbmUpIHsKICAgICAgICB0aGlzLnJlY3RhbmdsZShlKQogICAgICAgIHRoaXMucmVjdERyYXduID0gdHJ1ZQogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIHRoaXMuZHJhdyhlKQogICAgICB9CiAgICB9LAogICAgbW91c2VEcmFnIChlKSB7CiAgICAgIGlmICghdGhpcy5kcmF3TGluZSkgewogICAgICAgIHRoaXMucmVjdGFuZ2xlKGUpCiAgICAgICAgdGhpcy5yZWN0RHJhd24gPSB0cnVlCiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgdGhpcy5kcmF3KGUpCiAgICAgIH0KICAgIH0sCiAgICBtb3VzZVVwICgpIHsKICAgICAgaWYgKHRoaXMuZm9yZWdyb3VuZFBvaW50cy5sZW5ndGggPiAwIHx8IHRoaXMuYmFja2dyb3VuZFBvaW50cy5sZW5ndGggPiAwKSB7CiAgICAgICAgdmFyIGxhc3RNYXQgPSB0aGlzLmltYWdlLmNsb25lKCkKICAgICAgICB0aGlzLnVuZG9NYXRzLnB1c2gobGFzdE1hdCkKICAgICAgfQogICAgICBpZiAodGhpcy51bmRvUG9pbnRzRmcubGVuZ3RoID4gMCkgewogICAgICAgIHRoaXMudW5kb1BvaW50cy5wdXNoKHRoaXMudW5kb1BvaW50c0ZnKQogICAgICAgIHRoaXMudW5kb1BvaW50c0ZnID0gW10KICAgICAgfQogICAgICBpZiAodGhpcy51bmRvUG9pbnRzQmcubGVuZ3RoID4gMCkgewogICAgICAgIHRoaXMudW5kb1BvaW50cy5wdXNoKHRoaXMudW5kb1BvaW50c0JnKQogICAgICAgIHRoaXMudW5kb1BvaW50c0JnID0gW10KICAgICAgfQogICAgfSwKCiAgICAvLyBEcmF3aW5nIGFuZCBzdHVmZgogICAgZHJhdyAoZSkgewogICAgICB0aGlzLnAxID0gZS5wb2ludAogICAgICB0aGlzLmRyYXdpbmcgPSB0cnVlCiAgICAgIGN2LmNpcmNsZSh0aGlzLmltYWdlLCB0aGlzLnAxLCAyLCB0aGlzLmNvbG9yLCAtMSkKICAgICAgaWYgKHRoaXMuZm9yZWdyb3VuZFBvaW50cy5sZW5ndGggPT09IDAgJiYgdGhpcy5iYWNrZ3JvdW5kUG9pbnRzLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHZhciB0bXBJbWcgPSB0aGlzLmltYWdlLmNsb25lKCkKICAgICAgICBjb25zb2xlLmxvZygnb3JpZ2luYWwgaW1hZ2UgY29wcGllZCcpCiAgICAgICAgdGhpcy51bmRvTWF0cy5wdXNoKHRtcEltZykKICAgICAgfQogICAgICBpZiAodGhpcy5kcmF3VHlwZSA9PT0gJ0ZvcmUgcG9pbnQnKSB7CiAgICAgICAgdGhpcy5mb3JlZ3JvdW5kUG9pbnRzLnB1c2godGhpcy5wMSkKICAgICAgICB0aGlzLnVuZG9Qb2ludHNGZy5wdXNoKHRoaXMucDEpCiAgICAgIH0KICAgICAgZWxzZSBpZiAodGhpcy5kcmF3VHlwZSA9PT0gJ0JhY2sgcG9pbnQnKSB7CiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kUG9pbnRzLnB1c2godGhpcy5wMSkKICAgICAgICB0aGlzLnVuZG9Qb2ludHNCZy5wdXNoKHRoaXMucDEpCiAgICAgIH0KICAgICAgY3YuaW1zaG93KCdjYW52YXNPdXRwdXQnLCB0aGlzLmltYWdlKQogICAgfSwKICAgIGZnRHJhdyAoKSB7CiAgICAgIGlmICh0aGlzLnNlbGVjdGVkKSB7CiAgICAgICAgdGhpcy5kcmF3TGluZSA9IHRydWUKICAgICAgICB0aGlzLmRyYXdUeXBlID0gJ0ZvcmUgcG9pbnQnCiAgICAgICAgdGhpcy5jdXJzb3JUeXBlID0gJ3BvaW50ZXInCiAgICAgICAgdGhpcy5jb2xvciA9IG5ldyBjdi5TY2FsYXIoMjU1LCAwLCAwLCAyNTUpCiAgICAgIH0KICAgIH0sCiAgICBiZ0RyYXcgKCkgewogICAgICBpZiAodGhpcy5zZWxlY3RlZCkgewogICAgICAgIHRoaXMuZHJhd0xpbmUgPSB0cnVlCiAgICAgICAgdGhpcy5kcmF3VHlwZSA9ICdCYWNrIHBvaW50JwogICAgICAgIHRoaXMuY3Vyc29yVHlwZSA9ICdwb2ludGVyJwogICAgICAgIHRoaXMuY29sb3IgPSBuZXcgY3YuU2NhbGFyKDAsIDI1NSwgMCwgMjU1KQogICAgICB9CiAgICB9LAogICAgcmVjdGFuZ2xlIChlKSB7CiAgICAgIHRoaXMuY29sb3IgPSBuZXcgY3YuU2NhbGFyKDAsIDAsIDI1NSwgMjU1KQogICAgICB2YXIgcDIgPSBlLnBvaW50CiAgICAgIGRlbGV0ZSB0aGlzLnJlY3QKICAgICAgdGhpcy5pbWFnZS5kZWxldGUoKQogICAgICBpZiAocDIueCA+IHRoaXMud2lkdGgpIHsKICAgICAgICBwMi54ID0gdGhpcy53aWR0aCAtIDIKICAgICAgfQogICAgICBpZiAocDIueSA+IHRoaXMuaGVpZ2h0KSB7CiAgICAgICAgcDIueSA9IHRoaXMuaGVpZ2h0IC0gMgogICAgICB9CiAgICAgIHAyLnggPSBwMi54IDwgMCA/IDEgOiBwMi54CiAgICAgIHAyLnkgPSBwMi55IDwgMCA/IDEgOiBwMi55CiAgICAgIHZhciByZWN0V2lkdGggPSBNYXRoLmFicyhwMi54IC0gdGhpcy5wMy54KQogICAgICB2YXIgcmVjdEhlaWdodCA9IE1hdGguYWJzKHAyLnkgLSB0aGlzLnAzLnkpCiAgICAgIHRoaXMuaW1hZ2UgPSB0aGlzLmltYWdlVmlldy5jbG9uZSgpCiAgICAgIHRoaXMucmVjdCA9IG5ldyBjdi5SZWN0KE1hdGgubWluKHAyLngsIHRoaXMucDMueCksIE1hdGgubWluKHAyLnksIHRoaXMucDMueSksIHJlY3RXaWR0aCwgcmVjdEhlaWdodCkKICAgICAgY3YucmVjdGFuZ2xlKHRoaXMuaW1hZ2UsIHAyLCB0aGlzLnAzLCB0aGlzLmNvbG9yLCAyKQogICAgICBjdi5pbXNob3coJ2NhbnZhc091dHB1dCcsIHRoaXMuaW1hZ2UpCiAgICB9LAogICAgY29udGludWVEcmF3ICgpIHsKICAgICAgdGhpcy5hZGRNYXNrKHRoaXMuZmluYWxNYXNrUmVzdWx0KQogICAgICB0aGlzLmNvdW50ICs9IDEKICAgICAgdGhpcy5jb250aW51ZSA9IHRydWUKICAgICAgdGhpcy5ncmFiQ3V0TWFzay5kZWxldGUoKQogICAgICB0aGlzLmdyYWJDdXRNYXNrID0gbmV3IGN2Lk1hdCg1MTIsIDUxMiwgY3YuQ1ZfOFVDMSwgbmV3IGN2LlNjYWxhcigwLCAwLCAwLCAyNTUpKQogICAgICBjb25zb2xlLmxvZygnZGVsZXRlZCBncmFiY3V0TWFzaycpCiAgICAgIGN2Lmltc2hvdygnY2FudmFzTWFzaycsIHRoaXMuZmluYWxNYXNrUmVzdWx0KQogICAgICB0aGlzLnNlbGVjdGVkID0gZmFsc2UKICAgICAgdGhpcy5kcmF3TGluZSA9IGZhbHNlCiAgICAgIHRoaXMuZHJhd2luZyA9IGZhbHNlCiAgICAgIHRoaXMuZm9yZWdyb3VuZFBvaW50cyA9IFtdCiAgICAgIHRoaXMuYmFja2dyb3VuZFBvaW50cyA9IFtdCiAgICAgIHRoaXMuaW1hZ2VWaWV3ID0gdGhpcy5hZGRXZWlnaHRlZE1hdC5jbG9uZSgpCiAgICAgIGN2Lmltc2hvdygnY2FudmFzT3V0cHV0JywgdGhpcy5pbWFnZVZpZXcpCiAgICAgIHRoaXMuZHJhd1R5cGUgPSAncmVjdCcKICAgICAgdGhpcy5jdXJzb3JUeXBlID0gJ2Nyb3NzaGFpcicKICAgICAgdGhpcy5jb2xvciA9IG5ldyBjdi5TY2FsYXIoMCwgMCwgMjU1LCAyNTUpCiAgICB9LAogICAgdW5kbyAoKSB7CiAgICAgIGlmICh0aGlzLnVuZG9Qb2ludHMubGVuZ3RoID4gMCkgewogICAgICAgIGNvbnNvbGUubG9nKCdGb3JlZ3JvdW5kJywgdGhpcy5mb3JlZ3JvdW5kUG9pbnRzLmxlbmd0aCkKICAgICAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZCcsIHRoaXMuYmFja2dyb3VuZFBvaW50cy5sZW5ndGgpCiAgICAgICAgdGhpcy51bmRvTWF0cy5zcGxpY2UodGhpcy51bmRvTWF0cy5sZW5ndGggLSAxLCAxKQogICAgICAgIGN2Lmltc2hvdygnY2FudmFzT3V0cHV0JywgdGhpcy51bmRvTWF0c1t0aGlzLnVuZG9NYXRzLmxlbmd0aCAtIDFdKQogICAgICAgIHRoaXMuaW1hZ2UgPSB0aGlzLnVuZG9NYXRzW3RoaXMudW5kb01hdHMubGVuZ3RoIC0gMV0uY2xvbmUoKQogICAgICAgIHZhciBwb2ludHMgPSB0aGlzLnVuZG9Qb2ludHMKICAgICAgICB0aGlzLmZvcmVncm91bmRQb2ludHMgPSB0aGlzLmZvcmVncm91bmRQb2ludHMuZmlsdGVyKGZ1bmN0aW9uIChlbCkgewogICAgICAgICAgcmV0dXJuICFwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdLmluY2x1ZGVzKGVsKQogICAgICAgIH0pCiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kUG9pbnRzID0gdGhpcy5iYWNrZ3JvdW5kUG9pbnRzLmZpbHRlcihmdW5jdGlvbiAoZWwpIHsKICAgICAgICAgIHJldHVybiAhcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXS5pbmNsdWRlcyhlbCkKICAgICAgICB9KQogICAgICAgIGNvbnNvbGUubG9nKCdGb3JlZ3JvdW5kJywgdGhpcy5mb3JlZ3JvdW5kUG9pbnRzLmxlbmd0aCkKICAgICAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZCcsIHRoaXMuYmFja2dyb3VuZFBvaW50cy5sZW5ndGgpCiAgICAgICAgdGhpcy51bmRvUG9pbnRzLnNwbGljZSh0aGlzLnVuZG9Qb2ludHMubGVuZ3RoIC0gMSwgMSkKICAgICAgfQogICAgfSwKCiAgICAvLyBHcmFiLUN1dCBhbmQgYWNjZXNzb3JpZXMKICAgIHNlbGVjdCAoKSB7CiAgICAgIGlmICh0aGlzLnJlY3REcmF3bikgewogICAgICAgIHRoaXMuc2VsZWN0ZWQgPSB0cnVlCiAgICAgICAgdGhpcy5ncmFiX0N1dCgpCiAgICAgIH0KICAgIH0sCiAgICBncmFiX0N1dCAoKSB7CiAgICAgIHZhciBtYXNrVmlldyA9IHRoaXMuaW1hZ2VWaWV3LmNsb25lKCkKICAgICAgdmFyIHRlbXBNYXQxID0gbmV3IGN2Lk1hdCgpCiAgICAgIHZhciB0ZW1wTWF0MyA9IG5ldyBjdi5NYXQoKQogICAgICB2YXIgdGVtcE1hdDQgPSBuZXcgY3YuTWF0KCkKICAgICAgdmFyIGdyZWVuT3ZlcmxheSA9IG5ldyBjdi5NYXQoKQogICAgICB2YXIgYmdkTW9kZWwgPSBuZXcgY3YuTWF0KCkKICAgICAgdmFyIGZnZE1vZGVsID0gbmV3IGN2Lk1hdCgpCiAgICAgIHZhciByZXNpemVSZWN0ID0gbmV3IGN2LlJlY3QodGhpcy5yZWN0LnggKiAwLjUsIHRoaXMucmVjdC55ICogMC41LCB0aGlzLnJlY3Qud2lkdGggKiAwLjUsIHRoaXMucmVjdC5oZWlnaHQgKiAwLjUpCiAgICAgIGN2LmN2dENvbG9yKG1hc2tWaWV3LCBtYXNrVmlldywgMSwgMCkKICAgICAgdmFyIG1vZGUKICAgICAgaWYgKHRoaXMuZHJhd2luZykgewogICAgICAgIGNvbnNvbGUubG9nKCdmb3JlZ3JvdW5kIHBvaW50cycsIHRoaXMuZm9yZWdyb3VuZFBvaW50cy5sZW5ndGgpCiAgICAgICAgY29uc29sZS5sb2coJ2JhY2tncm91bmQgcG9pbnRzJywgdGhpcy5iYWNrZ3JvdW5kUG9pbnRzLmxlbmd0aCkKICAgICAgICBtb2RlID0gY3YuR0NfSU5JVF9XSVRIX01BU0sKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZm9yZWdyb3VuZFBvaW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgdGhpcy50ZW1wTWFzazIudWNoYXJQdHIodGhpcy5mb3JlZ3JvdW5kUG9pbnRzW2ldLnkgKiAwLjUsIHRoaXMuZm9yZWdyb3VuZFBvaW50c1tpXS54ICogMC41KVswXSA9IDEKICAgICAgICB9CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuYmFja2dyb3VuZFBvaW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgdGhpcy50ZW1wTWFzazIudWNoYXJQdHIodGhpcy5iYWNrZ3JvdW5kUG9pbnRzW2ldLnkgKiAwLjUsIHRoaXMuYmFja2dyb3VuZFBvaW50c1tpXS54ICogMC41KVswXSA9IDAKICAgICAgICB9CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgbW9kZSA9IGN2LkdDX0lOSVRfV0lUSF9SRUNUCiAgICAgIH0KICAgICAgY3YucmVzaXplKG1hc2tWaWV3LCB0ZW1wTWF0MSwgbmV3IGN2LlNpemUoMjU2LCAyNTYpLCAwLCAwLCBjdi5JTlRFUl9ORUFSRVNUKQogICAgICBjdi5ncmFiQ3V0KHRlbXBNYXQxLCB0aGlzLnRlbXBNYXNrMiwgcmVzaXplUmVjdCwgYmdkTW9kZWwsIGZnZE1vZGVsLCA0LCBtb2RlKQogICAgICBjdi5yZXNpemUodGhpcy50ZW1wTWFzazIsIHRlbXBNYXQzLCBuZXcgY3YuU2l6ZSg1MTIsIDUxMiksIDAsIDAsIGN2LklOVEVSX05FQVJFU1QpCiAgICAgIHRlbXBNYXQ0ID0gdGhpcy5jcmVhdGVNYXNrKHRlbXBNYXQzKS5jbG9uZSgpCiAgICAgIGN2LmN2dENvbG9yKHRlbXBNYXQ0LCB0ZW1wTWF0NCwgMSwgMCkKICAgICAgY3YuY3Z0Q29sb3IodGhpcy5pbWFnZVZpZXcsIHRoaXMuaW1hZ2VWaWV3LCAxLCAwKQogICAgICBjdi5hZGRXZWlnaHRlZCh0aGlzLmdyZWVuTWFzaywgdGhpcy5hbHBoYSwgdGVtcE1hdDQuY2xvbmUoKSwgdGhpcy5iZXRhLCB0aGlzLmdhbW1hLCBncmVlbk92ZXJsYXkpCiAgICAgIGN2LmFkZFdlaWdodGVkKGdyZWVuT3ZlcmxheS5jbG9uZSgpLCB0aGlzLmFscGhhLCB0aGlzLmltYWdlVmlldywgdGhpcy5iZXRhLCB0aGlzLmdhbW1hLCB0aGlzLmFkZFdlaWdodGVkTWF0KQogICAgICBjdi5pbXNob3coJ2NhbnZhc0lucHV0JywgdGhpcy5ncmFiQ3V0TWFzaykKICAgICAgY3YuaW1zaG93KCdjYW52YXNPdXRwdXQnLCB0aGlzLmFkZFdlaWdodGVkTWF0KQogICAgICBtYXNrVmlldy5kZWxldGUoKTsgdGVtcE1hdDEuZGVsZXRlKCk7IHRlbXBNYXQzLmRlbGV0ZSgpOyB0ZW1wTWF0NC5kZWxldGUoKTsgZ3JlZW5PdmVybGF5LmRlbGV0ZSgpOyBiZ2RNb2RlbC5kZWxldGUoKTsgZmdkTW9kZWwuZGVsZXRlKCkKICAgIH0sCiAgICBjcmVhdGVNYXNrIChtYXNrVG1wKSB7CiAgICAgIHZhciBibGFuayA9IG5ldyBjdi5NYXQoNTEyLCA1MTIsIGN2LkNWXzhVQzEsIG5ldyBjdi5TY2FsYXIoMCwgMCwgMCwgMjU1KSkKICAgICAgdmFyIG9uZU1hdCA9IG5ldyBjdi5NYXQoNTEyLCA1MTIsIGN2LkNWXzhVQzEsIG5ldyBjdi5TY2FsYXIoMSkpCiAgICAgIHZhciB0aHJlZU1hdCA9IG5ldyBjdi5NYXQoNTEyLCA1MTIsIGN2LkNWXzhVQzEsIG5ldyBjdi5TY2FsYXIoMykpCiAgICAgIHZhciBzdWJNYXQgPSBuZXcgY3YuTWF0KDUxMiwgNTEyLCBjdi5DVl84VUMxLCBuZXcgY3YuU2NhbGFyKHRoaXMuY291bnQpKQogICAgICB2YXIgZm9yZU1hc2sgPSBuZXcgY3YuTWF0KDUxMiwgNTEyLCBjdi5DVl84VUMxLCBuZXcgY3YuU2NhbGFyKDApKQogICAgICBjdi5jb21wYXJlKG1hc2tUbXAsIG9uZU1hdCwgb25lTWF0LCBjdi5DTVBfRVEpCiAgICAgIGN2LmNvbXBhcmUobWFza1RtcCwgdGhyZWVNYXQsIHRocmVlTWF0LCBjdi5DTVBfRVEpCiAgICAgIGN2LmJpdHdpc2Vfb3Iob25lTWF0LCB0aHJlZU1hdCwgZm9yZU1hc2spCiAgICAgIGN2LnN1YnRyYWN0KGZvcmVNYXNrLCBzdWJNYXQsIGZvcmVNYXNrKQogICAgICBjdi5hZGQoYmxhbmssIGZvcmVNYXNrLCBtYXNrVG1wKQogICAgICBvbmVNYXQuZGVsZXRlKCk7IHRocmVlTWF0LmRlbGV0ZSgpOyBzdWJNYXQuZGVsZXRlKCk7IGZvcmVNYXNrLmRlbGV0ZSgpCiAgICAgIHRoaXMuZ3JhYkN1dE1hc2sgPSBtYXNrVG1wLmNsb25lKCkKICAgICAgcmV0dXJuIG1hc2tUbXAKICAgIH0sCiAgICBhZGRNYXNrIChmaW5hbE1hc2spIHsKICAgICAgY3YuYWRkKGZpbmFsTWFzaywgdGhpcy5ncmFiQ3V0TWFzaywgZmluYWxNYXNrKQogICAgICBjdi5pbXNob3coJ2NhbnZhc01hc2snLCBmaW5hbE1hc2spCiAgICAgIHJldHVybiBmaW5hbE1hc2sKICAgIH0KICB9LAoKICBtb3VudGVkICgpIHsKICAgIGN2WydvblJ1bnRpbWVJbml0aWFsaXplZCddID0gKCkgPT4gewogICAgICB0aGlzLm1hdCA9IG5ldyBjdi5NYXQoKQogICAgICB0aGlzLmltYWdlVmlldyA9IG5ldyBjdi5NYXQoKQogICAgICB0aGlzLmltYWdlID0gbmV3IGN2Lk1hdCgpCiAgICAgIHRoaXMudGVtcE1hc2syID0gbmV3IGN2Lk1hdCgpCiAgICAgIHRoaXMuZ3JhYkN1dE1hc2sgPSBuZXcgY3YuTWF0KDUxMiwgNTEyLCBjdi5DVl84VUMxLCBuZXcgY3YuU2NhbGFyKDAsIDAsIDAsIDI1NSkpCiAgICAgIHRoaXMuZmluYWxNYXNrUmVzdWx0ID0gbmV3IGN2Lk1hdCg1MTIsIDUxMiwgY3YuQ1ZfOFVDMSwgbmV3IGN2LlNjYWxhcigwLCAwLCAwLCAyNTUpKQogICAgICB0aGlzLmdyZWVuTWFzayA9IG5ldyBjdi5NYXQoNTEyLCA1MTIsIGN2LkNWXzhVQzMsIG5ldyBjdi5TY2FsYXIoMTUyLCAyMzEsIDE1MywgMTAwKSkKICAgICAgdGhpcy5yZWRNYXNrID0gbmV3IGN2Lk1hdCg1MTIsIDUxMiwgY3YuQ1ZfOFVDMywgbmV3IGN2LlNjYWxhcigyMzEsIDE1MiwgMTY1LCAxMDApKQogICAgICB0aGlzLmFkZFdlaWdodGVkTWF0ID0gbmV3IGN2Lk1hdCgpCiAgICAgIHZhciB0b29sID0gbmV3IHBhcGVyLlRvb2woKQogICAgICB0b29sLm9uTW91c2VEb3duID0gdGhpcy5tb3VzZURvd24KICAgICAgdG9vbC5vbk1vdXNlRHJhZyA9IHRoaXMubW91c2VEcmFnCiAgICAgIHRvb2wub25Nb3VzZVVwID0gdGhpcy5tb3VzZVVwCgogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7CiAgICAgICAgY29uc29sZS5sb2coJ2tleTonLCBlKQogICAgICAgIGlmICh0aGlzLmltZ19kaXIubGVuZ3RoID4gMCkgewogICAgICAgICAgc3dpdGNoIChlLmNvZGUpIHsKICAgICAgICAgICAgY2FzZSAnQXJyb3dVcCc6CiAgICAgICAgICAgICAgaWYgKHRoaXMucmVjdERyYXduKSB7CiAgICAgICAgICAgICAgICB2YXIgZ3JlZW5PdmVybGF5ID0gbmV3IGN2Lk1hdCgpCiAgICAgICAgICAgICAgICBjdi5jdnRDb2xvcih0aGlzLmdyYWJDdXRNYXNrLCB0aGlzLmdyYWJDdXRNYXNrLCAxLCAwKQogICAgICAgICAgICAgICAgY3YuY3Z0Q29sb3IodGhpcy5pbWFnZVZpZXcsIHRoaXMuaW1hZ2VWaWV3LCAxLCAwKQogICAgICAgICAgICAgICAgY3YuYWRkV2VpZ2h0ZWQodGhpcy5ncmVlbk1hc2ssIHRoaXMuYWxwaGEsIHRoaXMuZ3JhYkN1dE1hc2ssIHRoaXMuYmV0YSwgdGhpcy5nYW1tYSwgZ3JlZW5PdmVybGF5KQogICAgICAgICAgICAgICAgY3YuYWRkV2VpZ2h0ZWQoZ3JlZW5PdmVybGF5LCB0aGlzLmFscGhhLCB0aGlzLmltYWdlVmlldywgdGhpcy5iZXRhLCB0aGlzLmdhbW1hLCB0aGlzLmFkZFdlaWdodGVkTWF0KQogICAgICAgICAgICAgICAgY3YuaW1zaG93KCdjYW52YXNJbnB1dCcsIHRoaXMuYWRkV2VpZ2h0ZWRNYXQpCiAgICAgICAgICAgICAgICBncmVlbk92ZXJsYXkuZGVsZXRlKCkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY2FzZSAnQXJyb3dEb3duJzoKICAgICAgICAgICAgICBpZiAodGhpcy5yZWN0RHJhd24pIHsKICAgICAgICAgICAgICAgIHZhciByZWRPdmVybGF5ID0gbmV3IGN2Lk1hdCgpCiAgICAgICAgICAgICAgICBjdi5jdnRDb2xvcih0aGlzLmdyYWJDdXRNYXNrLCB0aGlzLmdyYWJDdXRNYXNrLCAxLCAwKQogICAgICAgICAgICAgICAgY3YuY3Z0Q29sb3IodGhpcy5pbWFnZVZpZXcsIHRoaXMuaW1hZ2VWaWV3LCAxLCAwKQogICAgICAgICAgICAgICAgY3YuYWRkV2VpZ2h0ZWQodGhpcy5yZWRNYXNrLCB0aGlzLmFscGhhLCB0aGlzLmdyYWJDdXRNYXNrLCB0aGlzLmJldGEsIHRoaXMuZ2FtbWEsIHJlZE92ZXJsYXkpCiAgICAgICAgICAgICAgICBjdi5hZGRXZWlnaHRlZChyZWRPdmVybGF5LCB0aGlzLmFscGhhLCB0aGlzLmltYWdlVmlldywgdGhpcy5iZXRhLCB0aGlzLmdhbW1hLCB0aGlzLmFkZFdlaWdodGVkTWF0KQogICAgICAgICAgICAgICAgY3YuaW1zaG93KCdjYW52YXNJbnB1dCcsIHRoaXMuYWRkV2VpZ2h0ZWRNYXQpCiAgICAgICAgICAgICAgICByZWRPdmVybGF5LmRlbGV0ZSgpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6CiAgICAgICAgICAgICAgdGhpcy5wcmV2KCkKICAgICAgICAgICAgICB0aGlzLnJlc2V0SW1nKCkKICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzoKICAgICAgICAgICAgICB0aGlzLm5leHQoKQogICAgICAgICAgICAgIHRoaXMucmVzZXRJbWcoKQogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJ1NwYWNlJzoKICAgICAgICAgICAgICB0aGlzLnNlbGVjdCgpCiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY2FzZSAnS2V5Ric6CiAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWQpIHsKICAgICAgICAgICAgICAgIHRoaXMuZHJhd0xpbmUgPSB0cnVlCiAgICAgICAgICAgICAgICB0aGlzLmZnRHJhdygpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJ0tleUInOgogICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkKSB7CiAgICAgICAgICAgICAgICB0aGlzLmRyYXdMaW5lID0gdHJ1ZQogICAgICAgICAgICAgICAgdGhpcy5iZ0RyYXcoKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBjYXNlICdLZXlDJzoKICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZCkgewogICAgICAgICAgICAgICAgdGhpcy5jb250aW51ZURyYXcoKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBjYXNlICdLZXlSJzoKICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZCkgewogICAgICAgICAgICAgICAgdGhpcy5yZXNldEltZygpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGNhc2UgJ0tleVMnOgogICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkKSB7CiAgICAgICAgICAgICAgICB0aGlzLnNhdmVNYXNrKCkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY2FzZSAnS2V5VSc6CiAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWQpIHsKICAgICAgICAgICAgICAgIHRoaXMudW5kbygpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBmYWxzZSkKICAgIH0KICB9Cn0K"},{"version":3,"sources":["Tool.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"Tool.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"Tool\">\n    <b-navbar type=\"dark\" variant=\"dark\">\n      <b-navbar-brand href=\"https://www.smartvisionworks.com/\"></b-navbar-brand>\n      <b-navbar-nav>\n        <b-button class=\"nav-bar-button\" @mousedown=\"preventDefault\" v-b-toggle.sidebar-2>Instruction</b-button>\n        <form  enctype=\"multipart/form-data\" action=\"http://localhost:8082/upload\" method=\"post\" >\n          <input\n            style=\"display: none\"\n            name=\"myFiles\"\n            type=\"file\"\n            @change=\"onFileSelected\"\n            webkitdirectory\n            ref=\"fileInput\"/>\n          <b-button class=\"nav-bar-button\" @mousedown=\"preventDefault\" @click=\"$refs.fileInput.click()\">\n            Choose Files\n            <b-icon icon=\"folder-plus\" aria-hidden=\"true\"></b-icon>\n          </b-button>\n          <input type=\"submit\" value=\"hi\"/>\n        </form>\n          <b-button class=\"nav-bar-button\" @mousedown=\"preventDefault\" v-b-toggle.sidebar-1>View Files</b-button>\n          <b-button class=\"nav-bar-button\" @mousedown=\"preventDefault\" style=\"position: right\" @click=\"generateZip\">\n            <b-icon icon=\"download\" aria-hidden=\"true\"></b-icon>\n            <b-badge :variant=\"downloadColor\" v-if=\"numSaved > 0\">{{ numSaved + \" / \" + img_dir.length }}</b-badge>\n          </b-button>\n      </b-navbar-nav>\n    </b-navbar>\n    <b-container class=\"SVW web app\">\n      <b-row class=\"justify-content-md-center\">\n        <b-col cols=\"12\" md=\"auto\">\n          <b-sidebar class=\"sidebar\" id=\"sidebar-1\" title=\"Files\" shadow>\n            <div class=\"px-3 py-2\">\n              <li v-for=\"(file, idx) in fileNames\" :key=\"file\">\n                <b-button :variant=\"actionVariant\" @mousedown=\"preventDefault\" @click=\"toggle(idx)\" class=\"file-viewer\" :idx=\"activeIndex = img_dir_pos\" :class=\"{'active': idx == activeIndex}\">\n                  {{ file }}\n                </b-button>\n              </li>\n            </div>\n          </b-sidebar>\n          <b-sidebar class=\"sidebar\" id=\"sidebar-2\" title=\"Instructions\" shadow>\n            <div class=\"px-3 py-2\">\n              <ol>\n                <li><b>1.</b> Upload Files by clicking \"Upload Files\" button.</li>\n                <li><b>2.</b> Click and drag on the image to make a rectangle around desired object.</li>\n                <li><b>3.</b> Click \"Select\" or press the spacebar to segment the desired area.</li>\n                <li><b>4.</b> If the outcome is acceptable click \"Save\".</li>\n                <li><b>5.</b> If adjustments need to be made use the \"Foreground\" and \"Background\" buttons or press 'F' and 'B' and draw on the image using the respective tools for foreground and background areas.</li>\n                <li><b>6.</b> Click \"Select\" again to re-segment on the new selections.</li>\n                <li><b>7.</b> Continue this process on the image until desired segmentation has been achieved.</li>\n                <li><b>8.</b> Click \"Save\" and repeat this process for each image.</li>\n                <li><b>9.</b> When all images have been completed and saved click the download button on the top toolbar to retreave your masks.</li>\n                <li><b>10.</b> Good Job!</li>\n              </ol>\n            </div>\n          </b-sidebar>\n          <div :style=\"{cursor: cursorType}\" style=\"padding: 20px;\">\n            <canvas id=\"canvasOutput\" ref=\"canvasOutput\" style=\"width: 512px; height: 512px;\"></canvas>\n            <canvas id=\"canvasInput\" style=\"width: 512px; height: 512px;\"></canvas>\n            <canvas id=\"canvasMask\" style=\"width: 512px; height: 512px; display: none;\"></canvas>\n          </div>\n          <b-row class=\"justify-content-md-center\">\n            <b-button-toolbar v-if=\"this.toolActive\" key-nav aria-label=\"Toolbar with button groups\">\n              <div>\n                <b-button-group @mousedown=\"preventDefault\" class=\"mx-1\">\n                  <b-button b-button v-b-tooltip.hover.bottom=\"'(left-arrow)'\" @click=\"prev\">\n                    <b-icon icon=\"arrow-left\" aria-hidden=\"true\"></b-icon>\n                  </b-button>\n                  <b-button b-button v-b-tooltip.hover.bottom=\"'(right-arrow)'\"  @click=\"next\">\n                    <b-icon icon=\"arrow-right\" aria-hidden=\"true\"></b-icon>\n                  </b-button>\n                </b-button-group>\n              </div>\n              <div>\n                <b-button-group  @mousedown=\"preventDefault\" class=\"mx-1\">\n                  <b-button v-b-tooltip.hover.bottom=\"'(spacebar)'\" @click=\"select\">Select</b-button>\n                  <b-button v-b-tooltip.hover.bottom=\"'(F)'\" @click=\"fgDraw\">Foreground</b-button>\n                  <b-button v-b-tooltip.hover.bottom=\"'(B)'\" @click=\"bgDraw\">Background</b-button>\n                  <b-button v-b-tooltip.hover.bottom=\"'(C)'\" @click=\"continueDraw\">Continue</b-button>\n                  <b-button v-b-tooltip.hover.bottom=\"'(U)'\" @click=\"undo\">\n                    <b-icon icon=\"arrow-counterclockwise\" aria-hidden=\"true\"></b-icon>\n                    Undo\n                  </b-button>\n                  <b-button v-b-tooltip.hover.bottom=\"'(R)'\" @click=\"resetImg\">Reset</b-button>\n                </b-button-group>\n              </div>\n              <div>\n                <b-button-group  @mousedown=\"preventDefault\" class=\"mx-1\">\n                  <b-button v-b-tooltip.hover.bottom=\"'(S)'\" v-if=\"selected\" @click=\"saveMask\">Save</b-button>\n                </b-button-group>\n              </div>\n            </b-button-toolbar>\n          </b-row>\n        </b-col>\n      </b-row>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport paper from 'paper'\nimport * as FileSaver from 'file-saver'\nimport * as cv from 'opencv.js'\nimport * as Zip from 'jszip'\nimport * as ZipUtil from 'jszip-utils'\n\nexport default {\n  name: 'Tool',\n  data () {\n    return {\n      img: new Image(),\n      width: 512,\n      height: 512,\n      mat: '',\n      imageView: '',\n      image: '',\n      tempMask2: '',\n      finalMaskResult: '',\n      greenMask: '',\n      redMask: '',\n      addWeightedMat: '',\n      img_dir: [],\n      img_dir_pos: 0,\n      rect: '',\n      p1: '',\n      p3: '',\n      color: '',\n      drawType: '',\n      alpha: -0.5,\n      beta: 1,\n      gamma: 1,\n      count: 0,\n      drawing: false,\n      drawLine: false,\n      selected: false,\n      continue: false,\n      toolActive: false,\n      rectDrawn: false,\n      foregroundPoints: [],\n      backgroundPoints: [],\n      undoPointsFg: [],\n      undoPointsBg: [],\n      undoPoints: [],\n      undoMats: [],\n      fileNames: [],\n      saveOrder: [],\n      masks: [],\n      activeIndex: '',\n      cursorType: 'crosshair',\n      actionVariant: 'outline-secondary',\n      downloadColor: 'warning',\n      numSaved: 0\n    }\n  },\n  methods: {\n    preventDefault (e) {\n      e.preventDefault()\n    },\n    toggle (index) {\n      this.activeIndex = index\n      this.img_dir_pos = index\n      this.img.src = this.img_dir[index]\n      this.resetImg()\n    },\n\n    // File Upload and Saving/downloading\n    onFileSelected (e) {\n      this.toolActive = true\n      var files = e.target.files\n      for (let i = 0; i < files.length; i++) {\n        var fName = e.target.files[i].name\n        if (fName.indexOf('.png') === -1) {\n          this.fileNames.push(fName.slice(0, fName.lastIndexOf('.')) + '.png')\n        }\n        else {\n          this.fileNames.push(fName)\n        }\n        this.img_dir.push(URL.createObjectURL(e.target.files[i]))\n      }\n      console.log(this.fileNames)\n      this.img.src = this.img_dir[this.img_dir_pos]\n      paper.setup(this.$refs['canvasOutput'])\n      this.img.onload = () => {\n        this.showImg()\n      }\n    },\n    // saveMask () {\n    //   // // var Jimp = require('jimp')\n    //   // this.numSaved++\n    //   // var zip = new Zip()\n    //   // // var jimp = new Jimp()\n    //   // var newImg = new Image()\n    //   // var url\n    //   // var canvas = document.getElementById('canvasMask')\n    //   // var fileNames = this.fileNames\n    //   // var imgDirPos = this.img_dir_pos\n    //   // canvas.toBlob(function (blob) {\n    //   //   newImg = document.createElement('img')\n    //   //   url = URL.createObjectURL(blob)\n    //   //   console.log(url)\n    //   //   newImg.src = url\n    //   //   // document.body.appendChild(newImg)\n    //   //   ZipUtil.getBinaryContent(newImg.src, function (err, data) {\n    //   //     if (err) {\n    //   //       throw err\n    //   //     }\n    //   //     zip.file(fileNames[imgDirPos], data, {binary: true})\n    //   //     zip.generateAsync({type: 'blob'}).then(function (content) {\n    //   //       FileSaver.saveAs(content, 'Masks')\n    //   //     })\n    //   //   })\n    //   // })\n    //   // // Jimp.read('canvasMask')\n    //   // // console.log(Jimp)\n    //   // // Jimp.write('canvasMask')\n    //   // // this.next()\n    //   var canvas = document.getElementById('canvasMask')\n    //   var newImg = new Image()\n    //   var url\n    //   var png\n    //   var fileNames = this.fileNames\n    //   var imgDirPos = this.img_dir_pos\n    //   var download = function (href, name) {\n    //     var link = document.createElement('a')\n    //     link.download = name\n    //     link.style.opacity = '0'\n    //     link.href = href\n    //     link.click()\n    //     link.remove()\n    //   }\n    //   canvas.toBlob(function (blob) {\n    //     newImg = document.createElement('img')\n    //     url = URL.createObjectURL(blob)\n    //     newImg.src = url\n    //     png = canvas.toDataURL()\n    //     download(png, fileNames[imgDirPos])\n    //   })\n    //   this.next()\n    // },\n    saveMask () {\n      this.addMask(this.finalMaskResult)\n      this.numSaved++\n      if (this.numSaved === this.img_dir.length) {\n        this.downloadColor = 'success'\n      }\n      this.actionVariant = 'outline-success'\n      this.saveOrder.push(this.fileNames[this.img_dir_pos])\n      var canvas = document.getElementById('canvasMask')\n      var masks = this.masks\n      canvas.toBlob(function (blob) {\n        var newImg = document.createElement('img')\n        var url = URL.createObjectURL(blob)\n        console.log(url)\n        newImg.src = url\n        // document.body.appendChild(newImg)\n        masks.push(url)\n        //Communication with GoLang\n        // axios({method: \"POST\", url: \"http://10.10.11.59:8081/\", data: data, headers: {\"content-type\": \"text/plain\"}}).then(result => {\n          \n        // })\n      })\n      this.masks = masks\n      console.log(this.saveOrder)\n      this.next()\n    },\n    generateZip () {\n      if (this.masks.length > 0) {\n        this.canZip = true\n        var zip = new Zip()\n        var count1 = 0\n        var saveOrder = this.saveOrder\n        var masks = this.masks\n        this.masks.forEach(function (url, i) {\n          ZipUtil.getBinaryContent(url, function (err, data) {\n            if (err) {\n              throw err\n            }\n            zip.file(saveOrder[i], data, {binary: true})\n            count1++\n            if (count1 === masks.length) {\n              zip.generateAsync({type: 'blob'}).then(function (blob) {\n                FileSaver.saveAs(blob, 'Masks.zip')\n              })\n            }\n          })\n        })\n      }\n    },\n\n    // Canvas/Image navigation and output\n    showImg () {\n      this.mat = cv.imread(this.img)\n      cv.resize(this.mat, this.imageView, new cv.Size(512, 512), 0, 0, cv.INTER_NEAREST)\n      cv.imshow('canvasOutput', this.imageView)\n    },\n    prev () {\n      if (this.img_dir_pos > 0) {\n        this.img_dir_pos -= 1\n      }\n      else {\n        this.img_dir_pos = this.img_dir.length - 1\n      }\n      this.img.src = this.img_dir[this.img_dir_pos]\n      this.resetImg()\n    },\n    next () {\n      if (this.img_dir_pos === this.img_dir.length - 1) {\n        this.img_dir_pos = 0\n      }\n      else {\n        this.img_dir_pos += 1\n      }\n      this.resetImg()\n    },\n    resetImg () {\n      var blank = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(52, 64, 58, 255))\n      this.cursorType = 'crosshair'\n      this.actionVariant = 'outline-secondary'\n      this.selected = false\n      this.drawLine = false\n      this.drawing = false\n      this.continue = false\n      this.rectDrawn = false\n      this.backgroundPoints = []\n      this.foregroundPoints = []\n      this.undoPointsFg = []\n      this.undoPointsBg = []\n      this.undoPoints = []\n      this.undoMats = []\n      delete this.rect\n      this.count = 0\n      this.finalMaskResult.delete()\n      this.finalMaskResult = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      this.addWeightedMat.delete()\n      this.addWeightedMat = new cv.Mat()\n      this.grabCutMask.delete()\n      this.grabCutMask = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      this.img.src = this.img_dir[this.img_dir_pos]\n      this.img.onload = () => {\n        this.showImg()\n        cv.imshow('canvasInput', blank)\n      }\n    },\n\n    // Mouse Events\n    mouseDown (e) {\n      this.p3 = e.point\n      if (!this.drawLine) {\n        this.rectangle(e)\n        this.rectDrawn = true\n      }\n      else {\n        this.draw(e)\n      }\n    },\n    mouseDrag (e) {\n      if (!this.drawLine) {\n        this.rectangle(e)\n        this.rectDrawn = true\n      }\n      else {\n        this.draw(e)\n      }\n    },\n    mouseUp () {\n      if (this.foregroundPoints.length > 0 || this.backgroundPoints.length > 0) {\n        var lastMat = this.image.clone()\n        this.undoMats.push(lastMat)\n      }\n      if (this.undoPointsFg.length > 0) {\n        this.undoPoints.push(this.undoPointsFg)\n        this.undoPointsFg = []\n      }\n      if (this.undoPointsBg.length > 0) {\n        this.undoPoints.push(this.undoPointsBg)\n        this.undoPointsBg = []\n      }\n    },\n\n    // Drawing and stuff\n    draw (e) {\n      this.p1 = e.point\n      this.drawing = true\n      cv.circle(this.image, this.p1, 2, this.color, -1)\n      if (this.foregroundPoints.length === 0 && this.backgroundPoints.length === 0) {\n        var tmpImg = this.image.clone()\n        console.log('original image coppied')\n        this.undoMats.push(tmpImg)\n      }\n      if (this.drawType === 'Fore point') {\n        this.foregroundPoints.push(this.p1)\n        this.undoPointsFg.push(this.p1)\n      }\n      else if (this.drawType === 'Back point') {\n        this.backgroundPoints.push(this.p1)\n        this.undoPointsBg.push(this.p1)\n      }\n      cv.imshow('canvasOutput', this.image)\n    },\n    fgDraw () {\n      if (this.selected) {\n        this.drawLine = true\n        this.drawType = 'Fore point'\n        this.cursorType = 'pointer'\n        this.color = new cv.Scalar(255, 0, 0, 255)\n      }\n    },\n    bgDraw () {\n      if (this.selected) {\n        this.drawLine = true\n        this.drawType = 'Back point'\n        this.cursorType = 'pointer'\n        this.color = new cv.Scalar(0, 255, 0, 255)\n      }\n    },\n    rectangle (e) {\n      this.color = new cv.Scalar(0, 0, 255, 255)\n      var p2 = e.point\n      delete this.rect\n      this.image.delete()\n      if (p2.x > this.width) {\n        p2.x = this.width - 2\n      }\n      if (p2.y > this.height) {\n        p2.y = this.height - 2\n      }\n      p2.x = p2.x < 0 ? 1 : p2.x\n      p2.y = p2.y < 0 ? 1 : p2.y\n      var rectWidth = Math.abs(p2.x - this.p3.x)\n      var rectHeight = Math.abs(p2.y - this.p3.y)\n      this.image = this.imageView.clone()\n      this.rect = new cv.Rect(Math.min(p2.x, this.p3.x), Math.min(p2.y, this.p3.y), rectWidth, rectHeight)\n      cv.rectangle(this.image, p2, this.p3, this.color, 2)\n      cv.imshow('canvasOutput', this.image)\n    },\n    continueDraw () {\n      this.addMask(this.finalMaskResult)\n      this.count += 1\n      this.continue = true\n      this.grabCutMask.delete()\n      this.grabCutMask = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      console.log('deleted grabcutMask')\n      cv.imshow('canvasMask', this.finalMaskResult)\n      this.selected = false\n      this.drawLine = false\n      this.drawing = false\n      this.foregroundPoints = []\n      this.backgroundPoints = []\n      this.imageView = this.addWeightedMat.clone()\n      cv.imshow('canvasOutput', this.imageView)\n      this.drawType = 'rect'\n      this.cursorType = 'crosshair'\n      this.color = new cv.Scalar(0, 0, 255, 255)\n    },\n    undo () {\n      if (this.undoPoints.length > 0) {\n        console.log('Foreground', this.foregroundPoints.length)\n        console.log('Background', this.backgroundPoints.length)\n        this.undoMats.splice(this.undoMats.length - 1, 1)\n        cv.imshow('canvasOutput', this.undoMats[this.undoMats.length - 1])\n        this.image = this.undoMats[this.undoMats.length - 1].clone()\n        var points = this.undoPoints\n        this.foregroundPoints = this.foregroundPoints.filter(function (el) {\n          return !points[points.length - 1].includes(el)\n        })\n        this.backgroundPoints = this.backgroundPoints.filter(function (el) {\n          return !points[points.length - 1].includes(el)\n        })\n        console.log('Foreground', this.foregroundPoints.length)\n        console.log('Background', this.backgroundPoints.length)\n        this.undoPoints.splice(this.undoPoints.length - 1, 1)\n      }\n    },\n\n    // Grab-Cut and accessories\n    select () {\n      if (this.rectDrawn) {\n        this.selected = true\n        this.grab_Cut()\n      }\n    },\n    grab_Cut () {\n      var maskView = this.imageView.clone()\n      var tempMat1 = new cv.Mat()\n      var tempMat3 = new cv.Mat()\n      var tempMat4 = new cv.Mat()\n      var greenOverlay = new cv.Mat()\n      var bgdModel = new cv.Mat()\n      var fgdModel = new cv.Mat()\n      var resizeRect = new cv.Rect(this.rect.x * 0.5, this.rect.y * 0.5, this.rect.width * 0.5, this.rect.height * 0.5)\n      cv.cvtColor(maskView, maskView, 1, 0)\n      var mode\n      if (this.drawing) {\n        console.log('foreground points', this.foregroundPoints.length)\n        console.log('background points', this.backgroundPoints.length)\n        mode = cv.GC_INIT_WITH_MASK\n        for (var i = 0; i < this.foregroundPoints.length; i++) {\n          this.tempMask2.ucharPtr(this.foregroundPoints[i].y * 0.5, this.foregroundPoints[i].x * 0.5)[0] = 1\n        }\n        for (i = 0; i < this.backgroundPoints.length; i++) {\n          this.tempMask2.ucharPtr(this.backgroundPoints[i].y * 0.5, this.backgroundPoints[i].x * 0.5)[0] = 0\n        }\n      }\n      else {\n        mode = cv.GC_INIT_WITH_RECT\n      }\n      cv.resize(maskView, tempMat1, new cv.Size(256, 256), 0, 0, cv.INTER_NEAREST)\n      cv.grabCut(tempMat1, this.tempMask2, resizeRect, bgdModel, fgdModel, 4, mode)\n      cv.resize(this.tempMask2, tempMat3, new cv.Size(512, 512), 0, 0, cv.INTER_NEAREST)\n      tempMat4 = this.createMask(tempMat3).clone()\n      cv.cvtColor(tempMat4, tempMat4, 1, 0)\n      cv.cvtColor(this.imageView, this.imageView, 1, 0)\n      cv.addWeighted(this.greenMask, this.alpha, tempMat4.clone(), this.beta, this.gamma, greenOverlay)\n      cv.addWeighted(greenOverlay.clone(), this.alpha, this.imageView, this.beta, this.gamma, this.addWeightedMat)\n      cv.imshow('canvasInput', this.grabCutMask)\n      cv.imshow('canvasOutput', this.addWeightedMat)\n      maskView.delete(); tempMat1.delete(); tempMat3.delete(); tempMat4.delete(); greenOverlay.delete(); bgdModel.delete(); fgdModel.delete()\n    },\n    createMask (maskTmp) {\n      var blank = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      var oneMat = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(1))\n      var threeMat = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(3))\n      var subMat = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(this.count))\n      var foreMask = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0))\n      cv.compare(maskTmp, oneMat, oneMat, cv.CMP_EQ)\n      cv.compare(maskTmp, threeMat, threeMat, cv.CMP_EQ)\n      cv.bitwise_or(oneMat, threeMat, foreMask)\n      cv.subtract(foreMask, subMat, foreMask)\n      cv.add(blank, foreMask, maskTmp)\n      oneMat.delete(); threeMat.delete(); subMat.delete(); foreMask.delete()\n      this.grabCutMask = maskTmp.clone()\n      return maskTmp\n    },\n    addMask (finalMask) {\n      cv.add(finalMask, this.grabCutMask, finalMask)\n      cv.imshow('canvasMask', finalMask)\n      return finalMask\n    }\n  },\n\n  mounted () {\n    cv['onRuntimeInitialized'] = () => {\n      this.mat = new cv.Mat()\n      this.imageView = new cv.Mat()\n      this.image = new cv.Mat()\n      this.tempMask2 = new cv.Mat()\n      this.grabCutMask = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      this.finalMaskResult = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      this.greenMask = new cv.Mat(512, 512, cv.CV_8UC3, new cv.Scalar(152, 231, 153, 100))\n      this.redMask = new cv.Mat(512, 512, cv.CV_8UC3, new cv.Scalar(231, 152, 165, 100))\n      this.addWeightedMat = new cv.Mat()\n      var tool = new paper.Tool()\n      tool.onMouseDown = this.mouseDown\n      tool.onMouseDrag = this.mouseDrag\n      tool.onMouseUp = this.mouseUp\n\n      window.addEventListener('keydown', (e) => {\n        console.log('key:', e)\n        if (this.img_dir.length > 0) {\n          switch (e.code) {\n            case 'ArrowUp':\n              if (this.rectDrawn) {\n                var greenOverlay = new cv.Mat()\n                cv.cvtColor(this.grabCutMask, this.grabCutMask, 1, 0)\n                cv.cvtColor(this.imageView, this.imageView, 1, 0)\n                cv.addWeighted(this.greenMask, this.alpha, this.grabCutMask, this.beta, this.gamma, greenOverlay)\n                cv.addWeighted(greenOverlay, this.alpha, this.imageView, this.beta, this.gamma, this.addWeightedMat)\n                cv.imshow('canvasInput', this.addWeightedMat)\n                greenOverlay.delete()\n              }\n              break\n            case 'ArrowDown':\n              if (this.rectDrawn) {\n                var redOverlay = new cv.Mat()\n                cv.cvtColor(this.grabCutMask, this.grabCutMask, 1, 0)\n                cv.cvtColor(this.imageView, this.imageView, 1, 0)\n                cv.addWeighted(this.redMask, this.alpha, this.grabCutMask, this.beta, this.gamma, redOverlay)\n                cv.addWeighted(redOverlay, this.alpha, this.imageView, this.beta, this.gamma, this.addWeightedMat)\n                cv.imshow('canvasInput', this.addWeightedMat)\n                redOverlay.delete()\n              }\n              break\n            case 'ArrowLeft':\n              this.prev()\n              this.resetImg()\n              break\n            case 'ArrowRight':\n              this.next()\n              this.resetImg()\n              break\n            case 'Space':\n              this.select()\n              break\n            case 'KeyF':\n              if (this.selected) {\n                this.drawLine = true\n                this.fgDraw()\n              }\n              break\n            case 'KeyB':\n              if (this.selected) {\n                this.drawLine = true\n                this.bgDraw()\n              }\n              break\n            case 'KeyC':\n              if (this.selected) {\n                this.continueDraw()\n              }\n              break\n            case 'KeyR':\n              if (this.selected) {\n                this.resetImg()\n              }\n              break\n            case 'KeyS':\n              if (this.selected) {\n                this.saveMask()\n              }\n              break\n            case 'KeyU':\n              if (this.selected) {\n                this.undo()\n              }\n              break\n          }\n        }\n      }, false)\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh1, h2 {\n  font-weight: normal;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #539ecf;\n}\ncanvas {\n  background-color: #343a40;\n  border: 10px !important;\n  border-color: #343a40;\n  margin: 2px;\n}\n.file-viewer {\n  box-shadow: none !important;\n  border: none !important;\n  font-size: small !important;\n}\n.navbar-brand {\n  width: 16.6666%;\n  height: 60px;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: 100%;\n  padding: 25px 0;\n  float: left;\n  transition: all 0.3s ease;\n  background-image: url(../assets/name.svg);\n  color: rgba(255, 255, 255, 0.8);\n}\n.nav-bar-button {\n  background-color: transparent !important;\n  border-color: transparent !important;\n}\n.nav-bar-button:hover {\n  background-color: #5a6268 !important;\n  border-color: #5a6268 !important;\n}\n.b-sidebar-body{\n  background-color: black !important;\n}\n</style>\n"]}]}