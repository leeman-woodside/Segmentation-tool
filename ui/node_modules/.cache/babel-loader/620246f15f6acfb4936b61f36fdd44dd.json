{"remainingRequest":"/home/svw/vue_go_app/frontend/app/node_modules/babel-loader/lib/index.js!/home/svw/vue_go_app/frontend/app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/svw/vue_go_app/frontend/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/svw/vue_go_app/frontend/app/src/components/Tool.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/svw/vue_go_app/frontend/app/src/components/Tool.vue","mtime":1594234325927},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Tool.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"Tool\">\n    <b-navbar type=\"dark\" variant=\"dark\">\n      <b-navbar-brand href=\"https://www.smartvisionworks.com/\"></b-navbar-brand>\n      <b-navbar-nav>\n        <b-button class=\"nav-bar-button\" @mousedown=\"preventDefault\" v-b-toggle.sidebar-2>Instruction</b-button>\n        <form  enctype=\"multipart/form-data\" action=\"http://localhost:8082/upload\" method=\"post\" >\n          <input\n            style=\"display: none\"\n            name=\"myFiles\"\n            type=\"file\"\n            @change=\"onFileSelected\"\n            webkitdirectory\n            ref=\"fileInput\"/>\n          <b-button class=\"nav-bar-button\" @mousedown=\"preventDefault\" @click=\"$refs.fileInput.click()\">\n            Upload Files\n            <b-icon icon=\"folder-plus\" aria-hidden=\"true\"></b-icon>\n          </b-button>\n          <input type=\"submit\" value=\"hi\"/>\n        </form>\n          <b-button class=\"nav-bar-button\" @mousedown=\"preventDefault\" v-b-toggle.sidebar-1>View Files</b-button>\n          <b-button class=\"nav-bar-button\" @mousedown=\"preventDefault\" style=\"position: right\" @click=\"generateZip\">\n            <b-icon icon=\"download\" aria-hidden=\"true\"></b-icon>\n            <b-badge :variant=\"downloadColor\" v-if=\"numSaved > 0\">{{ numSaved + \" / \" + img_dir.length }}</b-badge>\n          </b-button>\n      </b-navbar-nav>\n    </b-navbar>\n    <b-container class=\"SVW web app\">\n      <b-row class=\"justify-content-md-center\">\n        <b-col cols=\"12\" md=\"auto\">\n          <b-sidebar class=\"sidebar\" id=\"sidebar-1\" title=\"Files\" shadow>\n            <div class=\"px-3 py-2\">\n              <li v-for=\"(file, idx) in fileNames\" :key=\"file\">\n                <b-button :variant=\"actionVariant\" @mousedown=\"preventDefault\" @click=\"toggle(idx)\" class=\"file-viewer\" :idx=\"activeIndex = img_dir_pos\" :class=\"{'active': idx == activeIndex}\">\n                  {{ file }}\n                </b-button>\n              </li>\n            </div>\n          </b-sidebar>\n          <b-sidebar class=\"sidebar\" id=\"sidebar-2\" title=\"Instructions\" shadow>\n            <div class=\"px-3 py-2\">\n              <ol>\n                <li><b>1.</b> Upload Files by clicking \"Upload Files\" button.</li>\n                <li><b>2.</b> Click and drag on the image to make a rectangle around desired object.</li>\n                <li><b>3.</b> Click \"Select\" or press the spacebar to segment the desired area.</li>\n                <li><b>4.</b> If the outcome is acceptable click \"Save\".</li>\n                <li><b>5.</b> If adjustments need to be made use the \"Foreground\" and \"Background\" buttons or press 'F' and 'B' and draw on the image using the respective tools for foreground and background areas.</li>\n                <li><b>6.</b> Click \"Select\" again to re-segment on the new selections.</li>\n                <li><b>7.</b> Continue this process on the image until desired segmentation has been achieved.</li>\n                <li><b>8.</b> Click \"Save\" and repeat this process for each image.</li>\n                <li><b>9.</b> When all images have been completed and saved click the download button on the top toolbar to retreave your masks.</li>\n                <li><b>10.</b> Good Job!</li>\n              </ol>\n            </div>\n          </b-sidebar>\n          <div :style=\"{cursor: cursorType}\" style=\"padding: 20px;\">\n            <canvas id=\"canvasOutput\" ref=\"canvasOutput\" style=\"width: 512px; height: 512px;\"></canvas>\n            <canvas id=\"canvasInput\" style=\"width: 512px; height: 512px;\"></canvas>\n            <canvas id=\"canvasMask\" style=\"width: 512px; height: 512px; display: none;\"></canvas>\n          </div>\n          <b-row class=\"justify-content-md-center\">\n            <b-button-toolbar v-if=\"this.toolActive\" key-nav aria-label=\"Toolbar with button groups\">\n              <div>\n                <b-button-group @mousedown=\"preventDefault\" class=\"mx-1\">\n                  <b-button b-button v-b-tooltip.hover.bottom=\"'(left-arrow)'\" @click=\"prev\">\n                    <b-icon icon=\"arrow-left\" aria-hidden=\"true\"></b-icon>\n                  </b-button>\n                  <b-button b-button v-b-tooltip.hover.bottom=\"'(right-arrow)'\"  @click=\"next\">\n                    <b-icon icon=\"arrow-right\" aria-hidden=\"true\"></b-icon>\n                  </b-button>\n                </b-button-group>\n              </div>\n              <div>\n                <b-button-group  @mousedown=\"preventDefault\" class=\"mx-1\">\n                  <b-button v-b-tooltip.hover.bottom=\"'(spacebar)'\" @click=\"select\">Select</b-button>\n                  <b-button v-b-tooltip.hover.bottom=\"'(F)'\" @click=\"fgDraw\">Foreground</b-button>\n                  <b-button v-b-tooltip.hover.bottom=\"'(B)'\" @click=\"bgDraw\">Background</b-button>\n                  <b-button v-b-tooltip.hover.bottom=\"'(C)'\" @click=\"continueDraw\">Continue</b-button>\n                  <b-button v-b-tooltip.hover.bottom=\"'(U)'\" @click=\"undo\">\n                    <b-icon icon=\"arrow-counterclockwise\" aria-hidden=\"true\"></b-icon>\n                    Undo\n                  </b-button>\n                  <b-button v-b-tooltip.hover.bottom=\"'(R)'\" @click=\"resetImg\">Reset</b-button>\n                </b-button-group>\n              </div>\n              <div>\n                <b-button-group  @mousedown=\"preventDefault\" class=\"mx-1\">\n                  <b-button v-b-tooltip.hover.bottom=\"'(S)'\" v-if=\"selected\" @click=\"saveMask\">Save</b-button>\n                </b-button-group>\n              </div>\n            </b-button-toolbar>\n          </b-row>\n        </b-col>\n      </b-row>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport paper from 'paper'\nimport * as FileSaver from 'file-saver'\nimport * as cv from 'opencv.js'\nimport * as Zip from 'jszip'\nimport * as ZipUtil from 'jszip-utils'\n\nexport default {\n  name: 'Tool',\n  data () {\n    return {\n      img: new Image(),\n      width: 512,\n      height: 512,\n      mat: '',\n      imageView: '',\n      image: '',\n      tempMask2: '',\n      finalMaskResult: '',\n      greenMask: '',\n      redMask: '',\n      addWeightedMat: '',\n      img_dir: [],\n      img_dir_pos: 0,\n      rect: '',\n      p1: '',\n      p3: '',\n      color: '',\n      drawType: '',\n      alpha: -0.5,\n      beta: 1,\n      gamma: 1,\n      count: 0,\n      drawing: false,\n      drawLine: false,\n      selected: false,\n      continue: false,\n      toolActive: false,\n      rectDrawn: false,\n      foregroundPoints: [],\n      backgroundPoints: [],\n      undoPointsFg: [],\n      undoPointsBg: [],\n      undoPoints: [],\n      undoMats: [],\n      fileNames: [],\n      saveOrder: [],\n      masks: [],\n      activeIndex: '',\n      cursorType: 'crosshair',\n      actionVariant: 'outline-secondary',\n      downloadColor: 'warning',\n      numSaved: 0\n    }\n  },\n  methods: {\n    preventDefault (e) {\n      e.preventDefault()\n    },\n    toggle (index) {\n      this.activeIndex = index\n      this.img_dir_pos = index\n      this.img.src = this.img_dir[index]\n      this.resetImg()\n    },\n\n    // File Upload and Saving/downloading\n    onFileSelected (e) {\n      this.toolActive = true\n      var files = e.target.files\n      for (let i = 0; i < files.length; i++) {\n        var fName = e.target.files[i].name\n        if (fName.indexOf('.png') === -1) {\n          this.fileNames.push(fName.slice(0, fName.lastIndexOf('.')) + '.png')\n        }\n        else {\n          this.fileNames.push(fName)\n        }\n        this.img_dir.push(URL.createObjectURL(e.target.files[i]))\n      }\n      console.log(this.fileNames)\n      this.img.src = this.img_dir[this.img_dir_pos]\n      paper.setup(this.$refs['canvasOutput'])\n      this.img.onload = () => {\n        this.showImg()\n      }\n    },\n    // saveMask () {\n    //   // // var Jimp = require('jimp')\n    //   // this.numSaved++\n    //   // var zip = new Zip()\n    //   // // var jimp = new Jimp()\n    //   // var newImg = new Image()\n    //   // var url\n    //   // var canvas = document.getElementById('canvasMask')\n    //   // var fileNames = this.fileNames\n    //   // var imgDirPos = this.img_dir_pos\n    //   // canvas.toBlob(function (blob) {\n    //   //   newImg = document.createElement('img')\n    //   //   url = URL.createObjectURL(blob)\n    //   //   console.log(url)\n    //   //   newImg.src = url\n    //   //   // document.body.appendChild(newImg)\n    //   //   ZipUtil.getBinaryContent(newImg.src, function (err, data) {\n    //   //     if (err) {\n    //   //       throw err\n    //   //     }\n    //   //     zip.file(fileNames[imgDirPos], data, {binary: true})\n    //   //     zip.generateAsync({type: 'blob'}).then(function (content) {\n    //   //       FileSaver.saveAs(content, 'Masks')\n    //   //     })\n    //   //   })\n    //   // })\n    //   // // Jimp.read('canvasMask')\n    //   // // console.log(Jimp)\n    //   // // Jimp.write('canvasMask')\n    //   // // this.next()\n    //   var canvas = document.getElementById('canvasMask')\n    //   var newImg = new Image()\n    //   var url\n    //   var png\n    //   var fileNames = this.fileNames\n    //   var imgDirPos = this.img_dir_pos\n    //   var download = function (href, name) {\n    //     var link = document.createElement('a')\n    //     link.download = name\n    //     link.style.opacity = '0'\n    //     link.href = href\n    //     link.click()\n    //     link.remove()\n    //   }\n    //   canvas.toBlob(function (blob) {\n    //     newImg = document.createElement('img')\n    //     url = URL.createObjectURL(blob)\n    //     newImg.src = url\n    //     png = canvas.toDataURL()\n    //     download(png, fileNames[imgDirPos])\n    //   })\n    //   this.next()\n    // },\n    saveMask () {\n      this.addMask(this.finalMaskResult)\n      this.numSaved++\n      if (this.numSaved === this.img_dir.length) {\n        this.downloadColor = 'success'\n      }\n      this.actionVariant = 'outline-success'\n      this.saveOrder.push(this.fileNames[this.img_dir_pos])\n      var canvas = document.getElementById('canvasMask')\n      var masks = this.masks\n      canvas.toBlob(function (blob) {\n        var newImg = document.createElement('img')\n        var url = URL.createObjectURL(blob)\n        console.log(url)\n        newImg.src = url\n        // document.body.appendChild(newImg)\n        masks.push(url)\n        //Communication with GoLang\n        // axios({method: \"POST\", url: \"http://10.10.11.59:8081/\", data: data, headers: {\"content-type\": \"text/plain\"}}).then(result => {\n          \n        // })\n      })\n      this.masks = masks\n      console.log(this.saveOrder)\n      this.next()\n    },\n    generateZip () {\n      if (this.masks.length > 0) {\n        this.canZip = true\n        var zip = new Zip()\n        var count1 = 0\n        var saveOrder = this.saveOrder\n        var masks = this.masks\n        this.masks.forEach(function (url, i) {\n          ZipUtil.getBinaryContent(url, function (err, data) {\n            if (err) {\n              throw err\n            }\n            zip.file(saveOrder[i], data, {binary: true})\n            count1++\n            if (count1 === masks.length) {\n              zip.generateAsync({type: 'blob'}).then(function (blob) {\n                FileSaver.saveAs(blob, 'Masks.zip')\n              })\n            }\n          })\n        })\n      }\n    },\n\n    // Canvas/Image navigation and output\n    showImg () {\n      this.mat = cv.imread(this.img)\n      cv.resize(this.mat, this.imageView, new cv.Size(512, 512), 0, 0, cv.INTER_NEAREST)\n      cv.imshow('canvasOutput', this.imageView)\n    },\n    prev () {\n      if (this.img_dir_pos > 0) {\n        this.img_dir_pos -= 1\n      }\n      else {\n        this.img_dir_pos = this.img_dir.length - 1\n      }\n      this.img.src = this.img_dir[this.img_dir_pos]\n      this.resetImg()\n    },\n    next () {\n      if (this.img_dir_pos === this.img_dir.length - 1) {\n        this.img_dir_pos = 0\n      }\n      else {\n        this.img_dir_pos += 1\n      }\n      this.resetImg()\n    },\n    resetImg () {\n      var blank = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(52, 64, 58, 255))\n      this.cursorType = 'crosshair'\n      this.actionVariant = 'outline-secondary'\n      this.selected = false\n      this.drawLine = false\n      this.drawing = false\n      this.continue = false\n      this.rectDrawn = false\n      this.backgroundPoints = []\n      this.foregroundPoints = []\n      this.undoPointsFg = []\n      this.undoPointsBg = []\n      this.undoPoints = []\n      this.undoMats = []\n      delete this.rect\n      this.count = 0\n      this.finalMaskResult.delete()\n      this.finalMaskResult = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      this.addWeightedMat.delete()\n      this.addWeightedMat = new cv.Mat()\n      this.grabCutMask.delete()\n      this.grabCutMask = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      this.img.src = this.img_dir[this.img_dir_pos]\n      this.img.onload = () => {\n        this.showImg()\n        cv.imshow('canvasInput', blank)\n      }\n    },\n\n    // Mouse Events\n    mouseDown (e) {\n      this.p3 = e.point\n      if (!this.drawLine) {\n        this.rectangle(e)\n        this.rectDrawn = true\n      }\n      else {\n        this.draw(e)\n      }\n    },\n    mouseDrag (e) {\n      if (!this.drawLine) {\n        this.rectangle(e)\n        this.rectDrawn = true\n      }\n      else {\n        this.draw(e)\n      }\n    },\n    mouseUp () {\n      if (this.foregroundPoints.length > 0 || this.backgroundPoints.length > 0) {\n        var lastMat = this.image.clone()\n        this.undoMats.push(lastMat)\n      }\n      if (this.undoPointsFg.length > 0) {\n        this.undoPoints.push(this.undoPointsFg)\n        this.undoPointsFg = []\n      }\n      if (this.undoPointsBg.length > 0) {\n        this.undoPoints.push(this.undoPointsBg)\n        this.undoPointsBg = []\n      }\n    },\n\n    // Drawing and stuff\n    draw (e) {\n      this.p1 = e.point\n      this.drawing = true\n      cv.circle(this.image, this.p1, 2, this.color, -1)\n      if (this.foregroundPoints.length === 0 && this.backgroundPoints.length === 0) {\n        var tmpImg = this.image.clone()\n        console.log('original image coppied')\n        this.undoMats.push(tmpImg)\n      }\n      if (this.drawType === 'Fore point') {\n        this.foregroundPoints.push(this.p1)\n        this.undoPointsFg.push(this.p1)\n      }\n      else if (this.drawType === 'Back point') {\n        this.backgroundPoints.push(this.p1)\n        this.undoPointsBg.push(this.p1)\n      }\n      cv.imshow('canvasOutput', this.image)\n    },\n    fgDraw () {\n      if (this.selected) {\n        this.drawLine = true\n        this.drawType = 'Fore point'\n        this.cursorType = 'pointer'\n        this.color = new cv.Scalar(255, 0, 0, 255)\n      }\n    },\n    bgDraw () {\n      if (this.selected) {\n        this.drawLine = true\n        this.drawType = 'Back point'\n        this.cursorType = 'pointer'\n        this.color = new cv.Scalar(0, 255, 0, 255)\n      }\n    },\n    rectangle (e) {\n      this.color = new cv.Scalar(0, 0, 255, 255)\n      var p2 = e.point\n      delete this.rect\n      this.image.delete()\n      if (p2.x > this.width) {\n        p2.x = this.width - 2\n      }\n      if (p2.y > this.height) {\n        p2.y = this.height - 2\n      }\n      p2.x = p2.x < 0 ? 1 : p2.x\n      p2.y = p2.y < 0 ? 1 : p2.y\n      var rectWidth = Math.abs(p2.x - this.p3.x)\n      var rectHeight = Math.abs(p2.y - this.p3.y)\n      this.image = this.imageView.clone()\n      this.rect = new cv.Rect(Math.min(p2.x, this.p3.x), Math.min(p2.y, this.p3.y), rectWidth, rectHeight)\n      cv.rectangle(this.image, p2, this.p3, this.color, 2)\n      cv.imshow('canvasOutput', this.image)\n    },\n    continueDraw () {\n      this.addMask(this.finalMaskResult)\n      this.count += 1\n      this.continue = true\n      this.grabCutMask.delete()\n      this.grabCutMask = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      console.log('deleted grabcutMask')\n      cv.imshow('canvasMask', this.finalMaskResult)\n      this.selected = false\n      this.drawLine = false\n      this.drawing = false\n      this.foregroundPoints = []\n      this.backgroundPoints = []\n      this.imageView = this.addWeightedMat.clone()\n      cv.imshow('canvasOutput', this.imageView)\n      this.drawType = 'rect'\n      this.cursorType = 'crosshair'\n      this.color = new cv.Scalar(0, 0, 255, 255)\n    },\n    undo () {\n      if (this.undoPoints.length > 0) {\n        console.log('Foreground', this.foregroundPoints.length)\n        console.log('Background', this.backgroundPoints.length)\n        this.undoMats.splice(this.undoMats.length - 1, 1)\n        cv.imshow('canvasOutput', this.undoMats[this.undoMats.length - 1])\n        this.image = this.undoMats[this.undoMats.length - 1].clone()\n        var points = this.undoPoints\n        this.foregroundPoints = this.foregroundPoints.filter(function (el) {\n          return !points[points.length - 1].includes(el)\n        })\n        this.backgroundPoints = this.backgroundPoints.filter(function (el) {\n          return !points[points.length - 1].includes(el)\n        })\n        console.log('Foreground', this.foregroundPoints.length)\n        console.log('Background', this.backgroundPoints.length)\n        this.undoPoints.splice(this.undoPoints.length - 1, 1)\n      }\n    },\n\n    // Grab-Cut and accessories\n    select () {\n      if (this.rectDrawn) {\n        this.selected = true\n        this.grab_Cut()\n      }\n    },\n    grab_Cut () {\n      var maskView = this.imageView.clone()\n      var tempMat1 = new cv.Mat()\n      var tempMat3 = new cv.Mat()\n      var tempMat4 = new cv.Mat()\n      var greenOverlay = new cv.Mat()\n      var bgdModel = new cv.Mat()\n      var fgdModel = new cv.Mat()\n      var resizeRect = new cv.Rect(this.rect.x * 0.5, this.rect.y * 0.5, this.rect.width * 0.5, this.rect.height * 0.5)\n      cv.cvtColor(maskView, maskView, 1, 0)\n      var mode\n      if (this.drawing) {\n        console.log('foreground points', this.foregroundPoints.length)\n        console.log('background points', this.backgroundPoints.length)\n        mode = cv.GC_INIT_WITH_MASK\n        for (var i = 0; i < this.foregroundPoints.length; i++) {\n          this.tempMask2.ucharPtr(this.foregroundPoints[i].y * 0.5, this.foregroundPoints[i].x * 0.5)[0] = 1\n        }\n        for (i = 0; i < this.backgroundPoints.length; i++) {\n          this.tempMask2.ucharPtr(this.backgroundPoints[i].y * 0.5, this.backgroundPoints[i].x * 0.5)[0] = 0\n        }\n      }\n      else {\n        mode = cv.GC_INIT_WITH_RECT\n      }\n      cv.resize(maskView, tempMat1, new cv.Size(256, 256), 0, 0, cv.INTER_NEAREST)\n      cv.grabCut(tempMat1, this.tempMask2, resizeRect, bgdModel, fgdModel, 4, mode)\n      cv.resize(this.tempMask2, tempMat3, new cv.Size(512, 512), 0, 0, cv.INTER_NEAREST)\n      tempMat4 = this.createMask(tempMat3).clone()\n      cv.cvtColor(tempMat4, tempMat4, 1, 0)\n      cv.cvtColor(this.imageView, this.imageView, 1, 0)\n      cv.addWeighted(this.greenMask, this.alpha, tempMat4.clone(), this.beta, this.gamma, greenOverlay)\n      cv.addWeighted(greenOverlay.clone(), this.alpha, this.imageView, this.beta, this.gamma, this.addWeightedMat)\n      cv.imshow('canvasInput', this.grabCutMask)\n      cv.imshow('canvasOutput', this.addWeightedMat)\n      maskView.delete(); tempMat1.delete(); tempMat3.delete(); tempMat4.delete(); greenOverlay.delete(); bgdModel.delete(); fgdModel.delete()\n    },\n    createMask (maskTmp) {\n      var blank = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      var oneMat = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(1))\n      var threeMat = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(3))\n      var subMat = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(this.count))\n      var foreMask = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0))\n      cv.compare(maskTmp, oneMat, oneMat, cv.CMP_EQ)\n      cv.compare(maskTmp, threeMat, threeMat, cv.CMP_EQ)\n      cv.bitwise_or(oneMat, threeMat, foreMask)\n      cv.subtract(foreMask, subMat, foreMask)\n      cv.add(blank, foreMask, maskTmp)\n      oneMat.delete(); threeMat.delete(); subMat.delete(); foreMask.delete()\n      this.grabCutMask = maskTmp.clone()\n      return maskTmp\n    },\n    addMask (finalMask) {\n      cv.add(finalMask, this.grabCutMask, finalMask)\n      cv.imshow('canvasMask', finalMask)\n      return finalMask\n    }\n  },\n\n  mounted () {\n    cv['onRuntimeInitialized'] = () => {\n      this.mat = new cv.Mat()\n      this.imageView = new cv.Mat()\n      this.image = new cv.Mat()\n      this.tempMask2 = new cv.Mat()\n      this.grabCutMask = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      this.finalMaskResult = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      this.greenMask = new cv.Mat(512, 512, cv.CV_8UC3, new cv.Scalar(152, 231, 153, 100))\n      this.redMask = new cv.Mat(512, 512, cv.CV_8UC3, new cv.Scalar(231, 152, 165, 100))\n      this.addWeightedMat = new cv.Mat()\n      var tool = new paper.Tool()\n      tool.onMouseDown = this.mouseDown\n      tool.onMouseDrag = this.mouseDrag\n      tool.onMouseUp = this.mouseUp\n\n      window.addEventListener('keydown', (e) => {\n        console.log('key:', e)\n        if (this.img_dir.length > 0) {\n          switch (e.code) {\n            case 'ArrowUp':\n              if (this.rectDrawn) {\n                var greenOverlay = new cv.Mat()\n                cv.cvtColor(this.grabCutMask, this.grabCutMask, 1, 0)\n                cv.cvtColor(this.imageView, this.imageView, 1, 0)\n                cv.addWeighted(this.greenMask, this.alpha, this.grabCutMask, this.beta, this.gamma, greenOverlay)\n                cv.addWeighted(greenOverlay, this.alpha, this.imageView, this.beta, this.gamma, this.addWeightedMat)\n                cv.imshow('canvasInput', this.addWeightedMat)\n                greenOverlay.delete()\n              }\n              break\n            case 'ArrowDown':\n              if (this.rectDrawn) {\n                var redOverlay = new cv.Mat()\n                cv.cvtColor(this.grabCutMask, this.grabCutMask, 1, 0)\n                cv.cvtColor(this.imageView, this.imageView, 1, 0)\n                cv.addWeighted(this.redMask, this.alpha, this.grabCutMask, this.beta, this.gamma, redOverlay)\n                cv.addWeighted(redOverlay, this.alpha, this.imageView, this.beta, this.gamma, this.addWeightedMat)\n                cv.imshow('canvasInput', this.addWeightedMat)\n                redOverlay.delete()\n              }\n              break\n            case 'ArrowLeft':\n              this.prev()\n              this.resetImg()\n              break\n            case 'ArrowRight':\n              this.next()\n              this.resetImg()\n              break\n            case 'Space':\n              this.select()\n              break\n            case 'KeyF':\n              if (this.selected) {\n                this.drawLine = true\n                this.fgDraw()\n              }\n              break\n            case 'KeyB':\n              if (this.selected) {\n                this.drawLine = true\n                this.bgDraw()\n              }\n              break\n            case 'KeyC':\n              if (this.selected) {\n                this.continueDraw()\n              }\n              break\n            case 'KeyR':\n              if (this.selected) {\n                this.resetImg()\n              }\n              break\n            case 'KeyS':\n              if (this.selected) {\n                this.saveMask()\n              }\n              break\n            case 'KeyU':\n              if (this.selected) {\n                this.undo()\n              }\n              break\n          }\n        }\n      }, false)\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh1, h2 {\n  font-weight: normal;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #539ecf;\n}\ncanvas {\n  background-color: #343a40;\n  border: 10px !important;\n  border-color: #343a40;\n  margin: 2px;\n}\n.file-viewer {\n  box-shadow: none !important;\n  border: none !important;\n  font-size: small !important;\n}\n.navbar-brand {\n  width: 16.6666%;\n  height: 60px;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: 100%;\n  padding: 25px 0;\n  float: left;\n  transition: all 0.3s ease;\n  background-image: url(../assets/name.svg);\n  color: rgba(255, 255, 255, 0.8);\n}\n.nav-bar-button {\n  background-color: transparent !important;\n  border-color: transparent !important;\n}\n.nav-bar-button:hover {\n  background-color: #5a6268 !important;\n  border-color: #5a6268 !important;\n}\n.b-sidebar-body{\n  background-color: black !important;\n}\n</style>\n"],"sourceRoot":"src/components"}]}