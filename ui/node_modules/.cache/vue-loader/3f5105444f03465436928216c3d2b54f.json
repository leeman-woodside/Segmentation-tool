{"remainingRequest":"/home/svw/vue_go_app/frontend/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/svw/vue_go_app/frontend/app/src/views/Admin.vue?vue&type=style&index=0&id=11a83353&scoped=true&lang=css&","dependencies":[{"path":"/home/svw/vue_go_app/frontend/app/src/views/Admin.vue","mtime":1594934167334},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmgxLCBoMiB7CiAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKfQp1bCB7CiAgbGlzdC1zdHlsZS10eXBlOiBub25lOwogIHBhZGRpbmc6IDA7Cn0KbGkgewogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICBtYXJnaW46IDAgMTBweDsKfQphIHsKICBjb2xvcjogIzUzOWVjZjsKfQpjYW52YXMgewogIGJhY2tncm91bmQtY29sb3I6ICMzNDNhNDA7CiAgYm9yZGVyOiAxMHB4ICFpbXBvcnRhbnQ7CiAgYm9yZGVyLWNvbG9yOiAjMzQzYTQwOwogIG1hcmdpbjogMnB4Owp9Ci5maWxlLXZpZXdlciB7CiAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50OwogIGJvcmRlcjogbm9uZSAhaW1wb3J0YW50OwogIGZvbnQtc2l6ZTogc21hbGwgIWltcG9ydGFudDsKfQoubmF2YmFyLWJyYW5kIHsKICB3aWR0aDogMTYuNjY2NiU7CiAgaGVpZ2h0OiA2MHB4OwogIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjsKICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OwogIGJhY2tncm91bmQtc2l6ZTogMTAwJTsKICBwYWRkaW5nOiAyNXB4IDA7CiAgZmxvYXQ6IGxlZnQ7CiAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZTsKICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vYXNzZXRzL25hbWUuc3ZnKTsKICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpOwp9Ci5uYXYtYmFyLWJ1dHRvbiB7CiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDsKICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7Cn0KLm5hdi1iYXItYnV0dG9uOmhvdmVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjNWE2MjY4ICFpbXBvcnRhbnQ7CiAgYm9yZGVyLWNvbG9yOiAjNWE2MjY4ICFpbXBvcnRhbnQ7Cn0KLmItc2lkZWJhci1ib2R5ewogIGJhY2tncm91bmQtY29sb3I6IGJsYWNrICFpbXBvcnRhbnQ7Cn0K"},{"version":3,"sources":["Admin.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Admin.vue","sourceRoot":"src/views","sourcesContent":["<template>\n<b-container fluid>\n  <div class=\"Tool\" @mousedown=\"preventDefault\">\n    <b-navbar type=\"dark\" variant=\"dark\">\n      <b-navbar-brand href=\"https://www.smartvisionworks.com/\"></b-navbar-brand>\n      <b-navbar-nav>\n          <input\n            style=\"display: none\"\n            name=\"myFiles\"\n            type=\"file\"\n            @change=\"onFileSelected\"\n            webkitdirectory\n            ref=\"fileInput\"/>\n          <b-button class=\"nav-bar-button\" @click=\"$refs.fileInput.click()\">\n            Upload Files\n            <b-icon icon=\"folder-plus\" aria-hidden=\"true\"></b-icon>\n          </b-button>\n          <b-button class=\"nav-bar-button\" style=\"position: right\" @click=\"getFiles\">\n            Get Masks\n          </b-button>\n          <b-button class=\"nav-bar-button\" style=\"position: right\" @click=\"generateZip\">\n            <b-icon icon=\"download\" aria-hidden=\"true\"></b-icon>\n            <b-badge :variant=\"downloadColor\" v-if=\"numSaved > 0\">{{ numSaved + \" / \" + img_dir.length }}</b-badge>\n          </b-button>\n      </b-navbar-nav>\n    </b-navbar>\n    <b-card>\n      <b-container>\n        <div>\n          <b-card\n            border-variant=\"default\"\n            header-bg-variant=\"default\"\n            header-text-variant=\"default\"\n            align=\"left\"\n          >\n            <div slot=\"header\">\n              <b-row>\n                <b-col cols=\"4\">\n                  <h2>Folders</h2>\n                </b-col>\n              </b-row>\n            </div>\n            <b-collapse id=\"cardSystems\" visible>\n              <b-card-text>\n                <b-table \n                  striped \n                  hover \n                  selectable\n                  select-mode=\"single\"\n                  @row-selected=\"showFiles\"\n                  sticky-header=\"500px\"\n                  :items=\"folders\"\n                  :fields=\"fields\"\n                >\n                </b-table>\n              </b-card-text>\n            </b-collapse>\n          </b-card>\n        </div>\n      </b-container>\n        <b-card\n          border-variant=\"default\"\n          header-bg-variant=\"default\"\n          header-text-variant=\"default\"\n          align=\"left\"\n        >\n          <div slot=\"header\">\n            <b-row>\n              <b-col cols=\"4\">\n                <h2>Files</h2>\n              </b-col>\n            </b-row>\n          </div>\n          <b-collapse id=\"fileSystems\" visible>\n            <b-card-text>\n              <b-table \n                striped \n                hover \n                selectable\n                sticky-header=\"500px\"\n                :items=\"files\"\n                :fields=\"fields2\"\n              >\n                <template v-slot:cell(mask)=\"row\">\n                  mask {{ row }}\n                </template>\n              </b-table>\n              <b-button href=\"http://localhost:8082/#/\" variant=\"secondary\">Go To Segmentation Tool</b-button>\n            </b-card-text>\n          </b-collapse>\n        </b-card>\n    </b-card>\n  </div>\n</b-container>\n</template>\n\n<script>\nimport axios from 'axios'\nimport * as FileSaver from 'file-saver'\nimport * as Zip from 'jszip'\nimport * as ZipUtil from 'jszip-utils'\n\nexport default {\n  name: 'Admin',\n  data () {\n    return {\n      activeFolder: '',\n      mask_Data: null,\n      image_Data: null,\n      fields: [\n        'folder_name',\n        'images',\n        'masks'\n      ],\n      fields2: [\n        'file_name',\n        'mask'\n      ],\n      folders: [],\n      files: []\n    }\n  },\n  methods: {\n    preventDefault (e) {\n      e.preventDefault()\n    },\n\n    onFileSelected (e) {\n      var files = e.target.files\n      for (let i = 0; i < files.length; i++) {\n        let formData = new FormData()\n        formData.append('images', e.target.files[i])\n        axios.post('/upload/images', formData)\n        .then((response) => {\n          console.log(response);\n        }, (error) => {\n          console.log(error);\n        });\n          //mongoDB stuff\n        // axios.post('/image', {\n          //   imgName: fName,\n        //   imgType: fType,\n        //   imgSize: fSize\n        // })\n        // .then((response) => {\n          //   console.log(response);\n        // }, (error) => {\n          //   console.log(error);\n        // });\n      }\n    },\n\n    getFiles () {\n      let promises = []\n      let self = this\n      promises.push(\n        new Promise(function(resolve, reject) {\n          axios.get('/imageLocation/images')\n            .then((response) => {\n              console.log(response.data);\n              self.image_Data = response.data\n              resolve()\n            })\n            .catch((error) => {\n              reject(error)\n            })\n        })\n      )\n\n      promises.push(\n        new Promise(function(resolve, reject) {\n          axios.get('/imageLocation/masks')\n            .then((response) => {\n              console.log(response.data);\n              self.mask_Data = response.data\n              resolve()\n            })\n            .catch((error) => {\n              reject(error)\n            })\n        })\n      )\n\n      Promise.all(promises).then(() => {\n        this.getFolders()\n      }).catch((error) => {\n        console.log(error)\n      })\n    },\n\n    getFolders () {\n      console.log('here')\n      for (let folder in this.image_Data) {\n        this.folders.push({\n            'folder_name': folder,\n            'images': this.image_Data[folder].length,\n            'masks': this.mask_Data[folder] ? this.mask_Data[folder].length : 0\n          })\n        console.log(this.folders)\n      }\n    },\n\n    showFiles (items) {\n      this.files = []\n      let self = this\n      console.log(items)\n      this.image_Data[items[0].folder_name].forEach(function(filename){\n        self.files.push({\n          'file_name': filename,\n          'mask': filename\n        })\n      })\n    },\n\n    generateZip () {\n      console.log(ZipUtil.getBinaryContent)\n      var zip = new Zip()\n      let downloadedFiles = []\n      for (let folder in this.mask_Data) {\n        let folderZip = zip.folder(folder)\n        this.mask_Data[folder].forEach(function (filename) {\n          var url = `/masks/${folder}/${filename}`\n          downloadedFiles.push(\n            new Promise(function(resolve, reject) {\n              ZipUtil.getBinaryContent(url, function (err, data) {\n                if (err) {\n                  reject(err)\n                }\n                folderZip.file(filename, data, {binary: true})\n                resolve()\n              })\n            })\n          )\n        })\n      }\n      console.log(downloadedFiles)\n      Promise.all(downloadedFiles).then(() => {\n        zip.generateAsync({type: 'blob'}).then(function (blob) {\n          FileSaver.saveAs(\n            blob, \n            new Date(Date.now()).toLocaleDateString().split('/').join('-')\n          )\n        })\n      })\n    }\n  },\n  mounted () {\n    this.getFiles()\n    this.getFolders()\n  }\n\n\n}\n</script>\n\n<style scoped>\nh1, h2 {\n  font-weight: normal;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #539ecf;\n}\ncanvas {\n  background-color: #343a40;\n  border: 10px !important;\n  border-color: #343a40;\n  margin: 2px;\n}\n.file-viewer {\n  box-shadow: none !important;\n  border: none !important;\n  font-size: small !important;\n}\n.navbar-brand {\n  width: 16.6666%;\n  height: 60px;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: 100%;\n  padding: 25px 0;\n  float: left;\n  transition: all 0.3s ease;\n  background-image: url(../assets/name.svg);\n  color: rgba(255, 255, 255, 0.8);\n}\n.nav-bar-button {\n  background-color: transparent !important;\n  border-color: transparent !important;\n}\n.nav-bar-button:hover {\n  background-color: #5a6268 !important;\n  border-color: #5a6268 !important;\n}\n.b-sidebar-body{\n  background-color: black !important;\n}\n</style>"]}]}