{"remainingRequest":"/home/svw/vue_go_app/frontend/app/node_modules/thread-loader/dist/cjs.js!/home/svw/vue_go_app/frontend/app/node_modules/babel-loader/lib/index.js!/home/svw/vue_go_app/frontend/app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/svw/vue_go_app/frontend/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/svw/vue_go_app/frontend/app/src/components/Tool.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/svw/vue_go_app/frontend/app/src/components/Tool.vue","mtime":1595285778189},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/svw/vue_go_app/frontend/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Tool.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"Tool\" @mousedown=\"preventDefault\">\n    <b-navbar type=\"dark\" variant=\"dark\">\n      <b-navbar-brand href=\"https://www.smartvisionworks.com/\"></b-navbar-brand>\n      <b-navbar-nav>\n        <b-button class=\"nav-bar-button\" v-b-toggle.sidebar-2>Instruction</b-button>\n          <b-button \n            class=\"nav-bar-button\"          \n            v-b-toggle.sidebar-1\n          >\n            View Files\n          </b-button>\n      </b-navbar-nav>\n    </b-navbar>\n    <b-sidebar class=\"col-sm-2 col-md-1 sidebar\" id=\"sidebar-1\" shadow>\n      <template v-slot:title>\n        <div style=\"text-align: right\" >\n          Files\n          <b-button @click=\"getFiles\">\n            <svg \n            width=\"1em\" \n            height=\"1em\" \n            viewBox=\"0 0 16 16\" \n            class=\"bi bi-arrow-clockwise\" \n            fill=\"currentColor\" \n            xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path fill-rule=\"evenodd\" d=\"M3.17 6.706a5 5 0 0 1 7.103-3.16.5.5 0 1 0 .454-.892A6 6 0 1 0 13.455 5.5a.5.5 0 0 0-.91.417 5 5 0 1 1-9.375.789z\"/>\n              <path fill-rule=\"evenodd\" d=\"M8.147.146a.5.5 0 0 1 .707 0l2.5 2.5a.5.5 0 0 1 0 .708l-2.5 2.5a.5.5 0 1 1-.707-.708L10.293 3 8.147.854a.5.5 0 0 1 0-.708z\"/>\n            </svg>\n          </b-button>\n        </div>\n      </template>\n      <div class=\"px-3 py-2\">\n        <b-table \n          striped \n          hover \n          selectable\n          select-mode=\"single\"\n          @row-selected=\"showFiles\"\n          sticky-header=\"500px\"\n          :items=\"folders\"\n          :fields=\"fields\"\n        >\n        </b-table>\n        <br/>\n        <b-pagination\n          v-model=\"currentPage\"\n          :total-rows=\"rows\"\n          :per-page=\"perPage\"\n          aria-controls=\"files\"\n        ></b-pagination>\n        <p class=\"mt-3\">Current Page: {{ currentPage }}</p>\n        <b-table \n          id=\"files\"\n          striped \n          hover \n          selectable\n          select-mode=\"single\"\n          @row-selected=\"toggle\"\n          sticky-header=\"500px\"\n          :per-page=\"perPage\"\n          :current-page=\"currentPage\"\n          :items=\"files\"\n          :fields=\"fields2\"\n          small\n        >\n          <template v-slot:cell(image)=\"data\">\n            <img :src=\"`/images/${activeFolder}/${data.item.image}`\" style=\"height: 55px\">\n          </template>\n          <template v-slot:cell(mask)=\"data\">\n            <img \n              v-if=\"mask_Data[activeFolder] && mask_Data[activeFolder].includes(data.item.image)\"\n              :src=\"`/masks/${activeFolder}/${data.item.image}`\" \n              style=\"height: 55px\"\n            >\n          </template>\n        </b-table>\n      </div>\n    </b-sidebar>\n    <b-sidebar class=\"sidebar\" id=\"sidebar-2\" title=\"Instructions\" shadow>\n      <div class=\"px-3 py-2\">\n        <ol>\n          <li><b>1.</b> Upload Files by clicking \"Upload Files\" button.</li>\n          <li><b>2.</b> Click and drag on the image to make a rectangle around desired object.</li>\n          <li><b>3.</b> Click \"Select\" or press the spacebar to segment the desired area.</li>\n          <li><b>4.</b> If the outcome is acceptable click \"Save\".</li>\n          <li><b>5.</b> If adjustments need to be made use the \"Foreground\" and \"Background\" buttons or press 'F' and 'B' and draw on the image using the respective tools for foreground and background areas.</li>\n          <li><b>6.</b> Click \"Select\" again to re-segment on the new selections.</li>\n          <li><b>7.</b> Continue this process on the image until desired segmentation has been achieved.</li>\n          <li><b>8.</b> Click \"Save\" and repeat this process for each image.</li>\n          <li><b>9.</b> When all images have been completed and saved click the download button on the top toolbar to retreave your masks.</li>\n          <li><b>10.</b> Good Job!</li>\n        </ol>\n      </div>\n    </b-sidebar>\n    <div :style=\"{cursor: cursorType}\" style=\"padding: 20px;\">\n      <canvas id=\"canvasOutput\" ref=\"canvasOutput\" style=\"width: 512px; height: 512px;\"></canvas>\n      <canvas id=\"canvasInput\" style=\"width: 512px; height: 512px;\"></canvas>\n      <canvas id=\"canvasMask\" style=\"width: 512px; height: 512px; display: none;\"></canvas>\n    </div>\n    <b-row class=\"justify-content-md-center\">\n      <b-button-toolbar v-if=\"this.toolActive\" key-nav aria-label=\"Toolbar with button groups\">\n        <div>\n          <b-button-group class=\"mx-1\">\n            <b-button b-button v-b-tooltip.hover.bottom=\"'(left-arrow)'\" @click=\"prev\">\n              <b-icon icon=\"arrow-left\" aria-hidden=\"true\"></b-icon>\n            </b-button>\n            <b-button b-button v-b-tooltip.hover.bottom=\"'(right-arrow)'\"  @click=\"next\">\n              <b-icon icon=\"arrow-right\" aria-hidden=\"true\"></b-icon>\n            </b-button>\n          </b-button-group>\n        </div>\n        <div>\n          <b-button-group  class=\"mx-1\">\n            <b-button v-b-tooltip.hover.bpointer.bottom=\"'(F)'\" @click=\"fgDraw\">Foreground</b-button>\n            <b-button v-b-tooltip.hover.bottom=\"'(B)'\" @click=\"bgDraw\">Background</b-button>\n            <b-button v-b-tooltip.hover.bottom=\"'(C)'\" @click=\"continueDraw\">Continue</b-button>\n            <b-button v-b-tooltip.hover.bottom=\"'(U)'\" @click=\"undo\">\n              <b-icon icon=\"arrow-counterclockwise\" aria-hidden=\"true\"></b-icon>\n              Undo\n            </b-button>\n            <b-button v-b-tooltip.hover.bottom=\"'(R)'\" @click=\"resetImg\">Reset</b-button>\n          </b-button-group>\n        </div>\n        <div>\n          <b-button-group  class=\"mx-1\">\n            <b-button v-b-tooltip.hover.bottom=\"'(S)'\" v-if=\"selected\" @click=\"saveMask\">Save</b-button>\n          </b-button-group>\n        </div>\n      </b-button-toolbar>\n    </b-row>\n  </div>\n</template>\n\n<script>\nimport paper from 'paper'\nimport * as cv from 'opencv.js'\nimport axios from 'axios'\n\nexport default {\n  name: 'Tool',\n  data () {\n    return {\n      activeFolder: '',\n      perPage: 4,\n      currentPage: 1,\n      index: '',\n      img: new Image(),\n      width: 512,\n      height: 512,\n      mat: '',\n      imageView: '',\n      image: '',\n      tempMask2: '',\n      finalMaskResult: '',\n      greenMask: '',\n      redMask: '',\n      addWeightedMat: '',\n      img_dir: [],\n      img_dir_pos: 0,\n      rect: '',\n      p1: '',\n      p3: '',\n      color: '',\n      drawType: '',\n      alpha: -0.5,\n      beta: 1,\n      gamma: 1,\n      count: 0,\n      drawing: false,\n      drawLine: false,\n      selected: false,\n      continue: false,\n      toolActive: false,\n      rectDrawn: false,\n      foregroundPoints: [],\n      backgroundPoints: [],\n      undoPointsFg: [],\n      undoPointsBg: [],\n      undoPoints: [],\n      undoMats: [],\n      fileNames: [],\n      image_Data: null,\n      mask_Data: null,\n      activeIndex: -1,\n      cursorType: 'crosshair',\n      actionVariant: 'outline-secondary',\n      downloadColor: 'warning',\n      fields: [\n        'folder_name',\n        'images',\n        'masks'\n      ],\n      fields2: [\n        'image',\n        'mask'\n      ],\n      folders: [],\n      files: []\n    }\n  },\n  computed: {\n    activeFile() {\n      if (this.activeFolder == '' || this.activeIndex == -1)\n        return ''\n      else\n        return this.image_Data[this.activeFolder][this.activeIndex]\n    },\n\n    rows() {\n      return this.files.length\n    }\n  },\n  methods: {\n    preventDefault (e) {\n      console.log(e)\n      e.preventDefault()\n    },\n    toggle (items) {\n      this.activeIndex = this.image_Data[this.activeFolder].indexOf(items[0].image)\n      console.log(items[0].image)\n      this.activeFile = this.image_Data[this.activeFolder][this.activeIndex]\n      console.log(this.image_Data[this.activeFolder][this.activeIndex])\n      this.img.src = `/images/${this.activeFolder}/${this.image_Data[this.activeFolder][this.activeIndex]}`\n      this.resetImg()\n    },\n\n    getFiles () {\n      let promises = []\n      let self = this\n      this.toolActive = true\n      promises.push(\n        new Promise(function(resolve, reject) {\n          axios.get('/imageLocation/images')\n            .then((response) => {\n              console.log(response.data);\n              self.image_Data = response.data\n              resolve()\n            })\n            .catch((error) => {\n              reject(error)\n            })\n        })\n      )\n      promises.push(\n        new Promise(function(resolve, reject) {\n          axios.get('/imageLocation/masks')\n            .then((response) => {\n              console.log(response.data);\n              self.mask_Data = response.data\n              resolve()\n            })\n            .catch((error) => {\n              reject(error)\n            })\n        })\n      )\n      Promise.all(promises).then(() => {\n        this.getFolders()\n        console.log('here')\n      }).catch((error) => {\n        console.log(error)\n      })\n    },\n\n    getFolders () {\n      console.log('here')\n      this.folders = []\n      for (let folder in this.image_Data) {\n        this.folders.push({\n            'folder_name': folder,\n            'images': this.image_Data[folder].length,\n            'masks': this.mask_Data[folder] ? this.mask_Data[folder].length : 0\n          })\n        console.log(this.folders)\n      }\n    },\n\n    showFiles (items) {\n      this.files = []\n      this.activeFolder = items[0].folder_name\n      let self = this\n      console.log(items)\n      this.image_Data[items[0].folder_name].forEach(function(filename){\n        self.files.push({\n          'image': filename,\n          'mask': filename\n        })\n      })\n      console.log(this.files)\n    },\n\n    saveMask () {\n      this.addMask(this.finalMaskResult)\n      this.actionVariant = 'outline-success'\n      var canvas = document.getElementById('canvasMask')\n      var self = this\n      canvas.toBlob(function (blob) {\n        const formData = new FormData()\n        formData.append('masks', blob, `${self.activeFolder}/${self.activeFile}`)\n        axios.post('/upload/masks', formData)\n        .then((response) => {\n          console.log(response);\n        }, (error) => {\n          console.log(error);\n        });\n        self.next()\n        self.getFiles()\n      })\n    },\n\n    // Canvas/Image navigation and output\n    showImg () {\n      this.mat = cv.imread(this.img)\n      cv.resize(this.mat, this.imageView, new cv.Size(512, 512), 0, 0, cv.INTER_NEAREST)\n      cv.imshow('canvasOutput', this.imageView)\n      if (this.mask_Data[this.activeFolder] && this.mask_Data[this.activeFolder].includes(this.activeFile)) {\n        var mask = new Image()\n        mask.src = `/masks/${this.activeFolder}/${this.activeFile}`\n        mask.onload = () => {\n          var mat = cv.imread(mask)\n          cv.imshow('canvasInput', mat)\n        }\n      }\n    },\n    prev () {\n      if (this.activeIndex > 0) {\n        this.activeIndex -= 1\n      }\n      else {\n        this.activeIndex = this.image_Data[this.activeFolder].length - 1\n      }\n      this.img.src = `/images/${this.activeFolder}/${this.image_Data[this.activeFolder][this.activeIndex]}`\n      this.resetImg()\n    },\n    next () {\n      if (this.activeIndex === this.image_Data[this.activeFolder].length - 1) {\n        this.activeIndex = 0\n      }\n      else {\n        this.activeIndex += 1\n      }\n      this.resetImg()\n    },\n\n    resetImg () {\n      var blank = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(52, 64, 58, 255))\n      this.cursorType = 'crosshair'\n      this.actionVariant = 'outline-secondary'\n      this.selected = false\n      this.drawLine = false\n      this.drawing = false\n      this.continue = false\n      this.rectDrawn = false\n      this.backgroundPoints = []\n      this.foregroundPoints = []\n      this.undoPointsFg = []\n      this.undoPointsBg = []\n      this.undoPoints = []\n      this.undoMats = []\n      delete this.rect\n      this.count = 0\n      this.finalMaskResult.delete()\n      this.finalMaskResult = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      this.addWeightedMat.delete()\n      this.addWeightedMat = new cv.Mat()\n      this.grabCutMask.delete()\n      this.grabCutMask = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      this.img.src = `/images/${this.activeFolder}/${this.image_Data[this.activeFolder][this.activeIndex]}`\n      this.img.onload = () => {\n        this.showImg()\n        cv.imshow('canvasInput', blank)\n      }\n    },\n\n    // Mouse Events\n    mouseDown (e) {\n      this.p3 = e.point\n      if (!this.drawLine) {\n        this.rectangle(e)\n        this.rectDrawn = true\n      }\n      else {\n        this.draw(e)\n      }\n    },\n    mouseDrag (e) {\n      if (!this.drawLine) {\n        this.rectangle(e)\n        this.rectDrawn = true\n      }\n      else {\n        this.draw(e)\n      }\n    },\n    mouseUp () {\n      if (this.foregroundPoints.length > 0 || this.backgroundPoints.length > 0) {\n        var lastMat = this.image.clone()\n        this.undoMats.push(lastMat)\n      }\n      if (this.undoPointsFg.length > 0) {\n        this.undoPoints.push(this.undoPointsFg)\n        this.undoPointsFg = []\n      }\n      if (this.undoPointsBg.length > 0) {\n        this.undoPoints.push(this.undoPointsBg)\n        this.undoPointsBg = []\n      }\n    },\n\n    // Drawing and stuff\n    draw (e) {\n      this.p1 = e.point\n      this.drawing = true\n      cv.circle(this.image, this.p1, 2, this.color, -1)\n      if (this.foregroundPoints.length === 0 && this.backgroundPoints.length === 0) {\n        var tmpImg = this.image.clone()\n        console.log('original image coppied')\n        this.undoMats.push(tmpImg)\n      }\n      if (this.drawType === 'Fore point') {\n        this.foregroundPoints.push(this.p1)\n        this.undoPointsFg.push(this.p1)\n      }\n      else if (this.drawType === 'Back point') {\n        this.backgroundPoints.push(this.p1)\n        this.undoPointsBg.push(this.p1)\n      }\n      cv.imshow('canvasOutput', this.image)\n    },\n    fgDraw () {\n      if (this.selected) {\n        this.drawLine = true\n        this.drawType = 'Fore point'\n        this.cursorType = 'pointer'\n        this.color = new cv.Scalar(255, 0, 0, 255)\n      }\n    },\n    bgDraw () {\n      if (this.selected) {\n        this.drawLine = true\n        this.drawType = 'Back point'\n        this.cursorType = 'pointer'\n        this.color = new cv.Scalar(0, 255, 0, 255)\n      }\n    },\n    rectangle (e) {\n      this.color = new cv.Scalar(0, 0, 255, 255)\n      var p2 = e.point\n      delete this.rect\n      this.image.delete()\n      if (p2.x > this.width) {\n        p2.x = this.width - 2\n      }\n      if (p2.y > this.height) {\n        p2.y = this.height - 2\n      }\n      p2.x = p2.x < 0 ? 1 : p2.x\n      p2.y = p2.y < 0 ? 1 : p2.y\n      var rectWidth = Math.abs(p2.x - this.p3.x)\n      var rectHeight = Math.abs(p2.y - this.p3.y)\n      this.image = this.imageView.clone()\n      this.rect = new cv.Rect(Math.min(p2.x, this.p3.x), Math.min(p2.y, this.p3.y), rectWidth, rectHeight)\n      cv.rectangle(this.image, p2, this.p3, this.color, 2)\n      cv.imshow('canvasOutput', this.image)\n    },\n    continueDraw () {\n      this.addMask(this.finalMaskResult)\n      this.count += 1\n      this.continue = true\n      this.grabCutMask.delete()\n      this.grabCutMask = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      console.log('deleted grabcutMask')\n      cv.imshow('canvasMask', this.finalMaskResult)\n      this.selected = false\n      this.drawLine = false\n      this.drawing = false\n      this.foregroundPoints = []\n      this.backgroundPoints = []\n      this.imageView = this.addWeightedMat.clone()\n      cv.imshow('canvasOutput', this.imageView)\n      this.drawType = 'rect'\n      this.cursorType = 'crosshair'\n      this.color = new cv.Scalar(0, 0, 255, 255)\n    },\n    undo () {\n      if (this.undoPoints.length > 0) {\n        console.log('Foreground', this.foregroundPoints.length)\n        console.log('Background', this.backgroundPoints.length)\n        this.undoMats.splice(this.undoMats.length - 1, 1)\n        cv.imshow('canvasOutput', this.undoMats[this.undoMats.length - 1])\n        this.image = this.undoMats[this.undoMats.length - 1].clone()\n        var points = this.undoPoints\n        this.foregroundPoints = this.foregroundPoints.filter(function (el) {\n          return !points[points.length - 1].includes(el)\n        })\n        this.backgroundPoints = this.backgroundPoints.filter(function (el) {\n          return !points[points.length - 1].includes(el)\n        })\n        console.log('Foreground', this.foregroundPoints.length)\n        console.log('Background', this.backgroundPoints.length)\n        this.undoPoints.splice(this.undoPoints.length - 1, 1)\n      }\n    },\n\n    // Grab-Cut and accessories\n    select () {\n      if (this.rectDrawn) {\n        this.selected = true\n        this.grab_Cut()\n      }\n    },\n    grab_Cut () {\n      var maskView = this.imageView.clone()\n      var tempMat1 = new cv.Mat()\n      var tempMat3 = new cv.Mat()\n      var tempMat4 = new cv.Mat()\n      var greenOverlay = new cv.Mat()\n      var bgdModel = new cv.Mat()\n      var fgdModel = new cv.Mat()\n      var resizeRect = new cv.Rect(this.rect.x * 0.5, this.rect.y * 0.5, this.rect.width * 0.5, this.rect.height * 0.5)\n      cv.cvtColor(maskView, maskView, 1, 0)\n      var mode\n      if (this.drawing) {\n        console.log('foreground points', this.foregroundPoints.length)\n        console.log('background points', this.backgroundPoints.length)\n        mode = cv.GC_INIT_WITH_MASK\n        for (var i = 0; i < this.foregroundPoints.length; i++) {\n          this.tempMask2.ucharPtr(this.foregroundPoints[i].y * 0.5, this.foregroundPoints[i].x * 0.5)[0] = 1\n        }\n        for (i = 0; i < this.backgroundPoints.length; i++) {\n          this.tempMask2.ucharPtr(this.backgroundPoints[i].y * 0.5, this.backgroundPoints[i].x * 0.5)[0] = 0\n        }\n      }\n      else {\n        mode = cv.GC_INIT_WITH_RECT\n      }\n      cv.resize(maskView, tempMat1, new cv.Size(256, 256), 0, 0, cv.INTER_NEAREST)\n      cv.grabCut(tempMat1, this.tempMask2, resizeRect, bgdModel, fgdModel, 4, mode)\n      cv.resize(this.tempMask2, tempMat3, new cv.Size(512, 512), 0, 0, cv.INTER_NEAREST)\n      tempMat4 = this.createMask(tempMat3).clone()\n      cv.cvtColor(tempMat4, tempMat4, 1, 0)\n      cv.cvtColor(this.imageView, this.imageView, 1, 0)\n      cv.addWeighted(this.greenMask, this.alpha, tempMat4.clone(), this.beta, this.gamma, greenOverlay)\n      cv.addWeighted(greenOverlay.clone(), this.alpha, this.imageView, this.beta, this.gamma, this.addWeightedMat)\n      cv.imshow('canvasInput', this.grabCutMask)\n      cv.imshow('canvasOutput', this.addWeightedMat)\n      maskView.delete(); tempMat1.delete(); tempMat3.delete(); tempMat4.delete(); greenOverlay.delete(); bgdModel.delete(); fgdModel.delete()\n    },\n    createMask (maskTmp) {\n      var blank = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      var oneMat = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(1))\n      var threeMat = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(3))\n      var subMat = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(this.count))\n      var foreMask = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0))\n      cv.compare(maskTmp, oneMat, oneMat, cv.CMP_EQ)\n      cv.compare(maskTmp, threeMat, threeMat, cv.CMP_EQ)\n      cv.bitwise_or(oneMat, threeMat, foreMask)\n      cv.subtract(foreMask, subMat, foreMask)\n      cv.add(blank, foreMask, maskTmp)\n      oneMat.delete(); threeMat.delete(); subMat.delete(); foreMask.delete()\n      this.grabCutMask = maskTmp.clone()\n      return maskTmp\n    },\n    addMask (finalMask) {\n      cv.add(finalMask, this.grabCutMask, finalMask)\n      cv.imshow('canvasMask', finalMask)\n      return finalMask\n    }\n  },\n\n  mounted () {\n    cv['onRuntimeInitialized'] = () => {\n      this.mat = new cv.Mat()\n      this.imageView = new cv.Mat()\n      this.image = new cv.Mat()\n      this.tempMask2 = new cv.Mat()\n      this.grabCutMask = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      this.finalMaskResult = new cv.Mat(512, 512, cv.CV_8UC1, new cv.Scalar(0, 0, 0, 255))\n      this.greenMask = new cv.Mat(512, 512, cv.CV_8UC3, new cv.Scalar(152, 231, 153, 100))\n      this.redMask = new cv.Mat(512, 512, cv.CV_8UC3, new cv.Scalar(231, 152, 165, 100))\n      this.addWeightedMat = new cv.Mat()\n      var tool = new paper.Tool()\n      tool.onMouseDown = this.mouseDown\n      tool.onMouseDrag = this.mouseDrag\n      tool.onMouseUp = this.mouseUp\n      paper.setup(this.$refs['canvasOutput'])\n      this.img.onload = () => {\n        this.showImg()\n      }\n      this.getFiles()\n\n      window.addEventListener('keydown', (e) => {\n        console.log('key:', e)\n        // this.preventDefault(e)\n        if (this.toolActive) {\n          switch (e.code) {\n            case 'ArrowUp':\n              if (this.rectDrawn) {\n                var greenOverlay = new cv.Mat()\n                cv.cvtColor(this.grabCutMask, this.grabCutMask, 1, 0)\n                cv.cvtColor(this.imageView, this.imageView, 1, 0)\n                cv.addWeighted(this.greenMask, this.alpha, this.grabCutMask, this.beta, this.gamma, greenOverlay)\n                cv.addWeighted(greenOverlay, this.alpha, this.imageView, this.beta, this.gamma, this.addWeightedMat)\n                cv.imshow('canvasInput', this.addWeightedMat)\n                greenOverlay.delete()\n              }\n              break\n            case 'ArrowDown':\n              if (this.rectDrawn) {\n                var redOverlay = new cv.Mat()\n                cv.cvtColor(this.grabCutMask, this.grabCutMask, 1, 0)\n                cv.cvtColor(this.imageView, this.imageView, 1, 0)\n                cv.addWeighted(this.redMask, this.alpha, this.grabCutMask, this.beta, this.gamma, redOverlay)\n                cv.addWeighted(redOverlay, this.alpha, this.imageView, this.beta, this.gamma, this.addWeightedMat)\n                cv.imshow('canvasInput', this.addWeightedMat)\n                redOverlay.delete()\n              }\n              break\n            case 'ArrowLeft':\n              this.prev()\n              this.resetImg()\n              break\n            case 'ArrowRight':\n              this.next()\n              this.resetImg()\n              break\n            case 'Space':\n              this.select()\n              break\n            case 'KeyF':\n              if (this.selected) {\n                this.drawLine = true\n                this.fgDraw()\n              }\n              break\n            case 'KeyB':\n              if (this.selected) {\n                this.drawLine = true\n                this.bgDraw()\n              }\n              break\n            case 'KeyC':\n              if (this.selected) {\n                this.continueDraw()\n              }\n              break\n            case 'KeyR':\n              if (this.selected) {\n                this.resetImg()\n              }\n              break\n            case 'KeyS':\n              if (this.selected) {\n                this.saveMask()\n              }\n              break\n            case 'KeyU':\n              if (this.selected) {\n                this.undo()\n              }\n              break\n          }\n        }\n      }, false)\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh1, h2 {\n  font-weight: normal;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #539ecf;\n}\ncanvas {\n  background-color: #343a40;\n  border: 10px !important;\n  border-color: #343a40;\n  margin: 2px;\n}\n.file-viewer {\n  box-shadow: none !important;\n  border: none !important;\n  font-size: small !important;\n}\n.navbar-brand {\n  width: 16.6666%;\n  height: 60px;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: 100%;\n  padding: 25px 0;\n  float: left;\n  transition: all 0.3s ease;\n  background-image: url(../assets/name.svg);\n  color: rgba(255, 255, 255, 0.8);\n}\n.nav-bar-button {\n  background-color: transparent !important;\n  border-color: transparent !important;\n}\n.nav-bar-button:hover {\n  background-color: #5a6268 !important;\n  border-color: #5a6268 !important;\n}\n.b-sidebar-body{\n  background-color: black !important;\n}\n.b-sidebar-btn-secondary {\n  width: 100%;\n}\n.card-main {\n  margin-top: 20px;\n  background-color: #343a40;\n  border: none;\n}\n</style>\n"],"sourceRoot":"src/components"}]}